{"version":3,"file":"static/js/8706.86d68318.chunk.js","mappings":"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","sources":["apis/DeliveryApi.js","apis/RackApi.js","apis/ReportsApi.js","apis/ReqApi.js","apis/ReturnApi.js","apis/StockApi.js","apis/StoreApi.js","features/stock/StockIntakeReturning.js"],"sourcesContent":["import { SoftwrkApi } from \"configs/StoreQueryConfig\";\r\n\r\nconst BASE_URL = \"/delivery\";\r\n\r\nexport const DeliveryApi = SoftwrkApi.injectEndpoints({\r\n  endpoints: (builder) => ({\r\n    finalDelivery: builder.mutation({\r\n      query: (config) => ({\r\n        url: `${BASE_URL}`,\r\n        method: \"POST\",\r\n        ...config,\r\n      }),\r\n    }),\r\n    // deleteJob: builder.mutation({\r\n    //   query: ({ path, ...config }) => ({\r\n    //     url: `${JOBS_BASE_URL}/${path.id}`,\r\n    //     method: \"DELETE\",\r\n    //     ...config,\r\n    //   }),\r\n    //   invalidatesTags: (_, error, { path }) =>\r\n    //     !error ? invalidateTags(StoreQueryTagEnum.JOB, { ids: [path.id] }) : [],\r\n    // }),\r\n\r\n    discard: builder.mutation({\r\n      query: (config) => ({\r\n        url: `${BASE_URL}/Discard-Delivery`,\r\n        method: \"DELETE\",\r\n        ...config,\r\n      }),\r\n    }),\r\n    stockDelivery: builder.mutation({\r\n      query: (config) => ({\r\n        url: `${BASE_URL}/add-delivery-Item`,\r\n        method: \"POST\",\r\n        ...config,\r\n      }),\r\n    }),\r\n\r\n    getAllDeliveries: builder.query({\r\n      query: (arg) => {\r\n        // const { userType } = arg;\r\n        return {\r\n          url: `${BASE_URL}`,\r\n          method: \"GET\",\r\n          // params: { userType },\r\n        };\r\n      },\r\n    }),\r\n\r\n    // allDeliveries: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { userType } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}`,\r\n    //       method: \"GET\",\r\n    //       // params: { userType },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    getTempDeliveries: builder.query({\r\n      query: (arg) => {\r\n        const { userType } = arg;\r\n        return {\r\n          url: `${BASE_URL}/Get-DeliveryDetails`,\r\n          method: \"GET\",\r\n          // params: { userType },\r\n        };\r\n      },\r\n    }),\r\n   \r\n\r\n    // getAllRidersForCompany: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { userId } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/super-admin/getallriderscompany`,\r\n    //       method: \"GET\",\r\n    //       params: { userId },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n   \r\n  }),\r\n});\r\n\r\n// ;\r\n\r\nexport default DeliveryApi;\r\n","import { SoftwrkApi } from \"configs/StoreQueryConfig\";\r\n\r\nconst BASE_URL = \"/rack\";\r\n\r\nexport const UserApi = SoftwrkApi.injectEndpoints({\r\n  endpoints: (builder) => ({\r\n    // receiveStock: builder.mutation({\r\n    //   query: (config) => ({\r\n    //     url: `${BASE_URL}/Receive-Stock`,\r\n    //     method: \"POST\",\r\n    //     ...config,\r\n    //   }),\r\n    // }),\r\n    productRack: builder.mutation({\r\n      query: (config) => ({\r\n        url: `${BASE_URL}/Product-Rack`,\r\n        method: \"PUT\",\r\n        ...config,\r\n      }),\r\n    }),\r\n    createRacks: builder.mutation({\r\n      query: (config) => ({\r\n        url: `${BASE_URL}/`,\r\n        method: \"POST\",\r\n        ...config,\r\n      }),\r\n    }),\r\n\r\n    getRack: builder.query({\r\n      query: (arg) => {\r\n        const { reloadItems } = arg;\r\n        return {\r\n          url: `${BASE_URL}`,\r\n          method: \"GET\",\r\n          // params: { reloadItems },\r\n        };\r\n      },\r\n    }),\r\n\r\n    getRackShelves: builder.query({\r\n      query: (arg) => {\r\n        const { reloadItems } = arg;\r\n        return {\r\n          url: `${BASE_URL}/shelves`,\r\n          method: \"GET\",\r\n          // params: { reloadItems },\r\n        };\r\n      },\r\n    }),\r\n\r\n    getShelvesByRackId: builder.query({\r\n      query: (arg) => {\r\n        const { id } = arg;\r\n        return {\r\n          url: `${BASE_URL}/${id}`,\r\n          method: \"GET\",\r\n          // params: { userType },\r\n        };\r\n      },\r\n    }),\r\n\r\n    getShelves: builder.query({\r\n      query: (arg) => {\r\n        const { userType } = arg;\r\n        return {\r\n          url: `${BASE_URL}/shelves`,\r\n          method: \"GET\",\r\n          // params: { userType },\r\n        };\r\n      },\r\n    }),\r\n    getProductsByRack: builder.query({\r\n      query: (arg) => {\r\n        const { RackId } = arg;\r\n        return {\r\n          url: `${BASE_URL}/Rack-Products/${RackId}`,\r\n          method: \"GET\",\r\n          // params: { RackId },\r\n        };\r\n      },\r\n    }),\r\n\r\n    // getStoreStock: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { userType } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/products`,\r\n    //       method: \"GET\",\r\n    //       // params: { userType },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    // getStoreTaggingDetail: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { deliveryItemId, unit } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/get-taggingDetail`,\r\n    //       method: \"GET\",\r\n    //       params: {  deliveryItemId, unit },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    // getTempStocks: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { userType } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/Get-TmpStocks`,\r\n    //       method: \"GET\",\r\n    //       // params: { userType },\r\n    //     };\r\n    //   },\r\n    // }),\r\n    // getItemDetail: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { itemId } = arg;\r\n    //     // console.log(pageNo);\r\n    //     return {\r\n    //       url: `${BASE_URL}/Get-ItemDetails/${itemId}/`,\r\n    //       method: \"GET\",\r\n    //       // params: { pageNo },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    // getStoreStocks: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { userType, pageNo } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/Get-Store-Stocks`,\r\n    //       method: \"GET\",\r\n    //       params: { userType, pageNo },\r\n    //     };\r\n    //   },\r\n    // }),\r\n    // getGlobalBin: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { ProjectType, Location} = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/Get-Global-Bincard`,\r\n    //       method: \"GET\",\r\n    //       // param nas: {  ProjectType, Location },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    // getBinCard: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { ProjectType, Location} = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/Get-BinCard`,\r\n    //       method: \"GET\",\r\n    //       params: {  ProjectType, Location },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    // getAllCompanyRiders: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { userType } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/company/getalluser`,\r\n    //       method: \"GET\",\r\n    //       params: { userType },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    // getAllCompanyCustomers: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { userType } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/company/getalluser`,\r\n    //       method: \"GET\",\r\n    //       params: { userType },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    // getAllTrips: builder.query({\r\n    //   query: (arg) => {\r\n    //     // const { userType } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/super-admin/getAllTripRequest`,\r\n    //       method: \"GET\",\r\n    //       // params: { userType },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    // getAllRidersForCompany: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { userId } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/super-admin/getallriderscompany`,\r\n    //       method: \"GET\",\r\n    //       params: { userId },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    getStats: builder.query({\r\n      query: (arg) => {\r\n        // const { userType } = arg;\r\n        return {\r\n          url: `${BASE_URL}/super-admin/userStatsChart`,\r\n          method: \"GET\",\r\n          // params: { userType },\r\n        };\r\n      },\r\n    }),\r\n  }),\r\n});\r\n\r\n// ;\r\n\r\nexport default UserApi;\r\n","import { SoftwrkApi } from \"configs/StoreQueryConfig\";\r\n\r\nconst BASE_URL = \"/Reports\";\r\n\r\nexport const ReportsApi = SoftwrkApi.injectEndpoints({\r\n  endpoints: (builder) => ({\r\n    // signup: builder.mutation({\r\n    //   query: (config) => ({\r\n    //     url: `${BASE_URL}/signup`,\r\n    //     method: \"POST\",\r\n    //     ...config,\r\n    //   }),\r\n    // }),\r\n    // stockDelivery: builder.mutation({\r\n    //   query: (config) => ({\r\n    //     url: `${BASE_URL}/add-delivery-Item`,\r\n    //     method: \"POST\",\r\n    //     ...config,\r\n    //   }),\r\n    // }),\r\n\r\n    getSkuStocks: builder.query({\r\n      query: (arg) => {\r\n        const { productId } = arg;\r\n        return {\r\n          url: `${BASE_URL}/Get-Stocks-SKU/${productId}`,\r\n          method: \"GET\",\r\n          //   params: { productId },\r\n        };\r\n      },\r\n    }),\r\n    getStocksByLocation: builder.query({\r\n      query: (arg) => {\r\n        const { locationId } = arg;\r\n        return {\r\n          url: `${BASE_URL}/Get-Stocks-Location/${locationId}`,\r\n          method: \"GET\",\r\n          //   params: { productId },\r\n        };\r\n      },\r\n    }),\r\n\r\n    getProductBalances: builder.query({\r\n      // Get-Products-Balances\r\n      query: (arg) => {\r\n        const { userType } = arg;\r\n        return {\r\n          url: `${BASE_URL}/Get-Products-Store-Balances`,\r\n          method: \"GET\",\r\n          // params: { userType },\r\n        };\r\n      },\r\n    }),\r\n\r\n\r\n    getAllProductsBalance: builder.query({\r\n      query: (arg) => {\r\n        const { userType } = arg;\r\n        return {\r\n          url: `${BASE_URL}/Get-Products-Balances`,\r\n          method: \"GET\",\r\n          // params: { userType },\r\n        };\r\n      },\r\n    }),\r\n    getAuditLogs: builder.query({\r\n      query: (arg) => {\r\n        const { pageNo } = arg;\r\n        console.log(pageNo);\r\n        return {\r\n          url: `${BASE_URL}/Get-AuditLogs`,\r\n          method: \"GET\",\r\n          params: { pageNo },\r\n        };\r\n      },\r\n    }),\r\n\r\n    getTransactionLogs: builder.query({\r\n      query: (arg) => {\r\n        const { From, To, filter } = arg;\r\n        // console.log(pageNo);\r\n        return {\r\n          url: `${BASE_URL}/Get-TransactionLogs`,\r\n          method: \"GET\",\r\n          params: { From, To, filter  },\r\n        };\r\n      },\r\n    }),\r\n    getRackBalance: builder.query({\r\n      query: (arg) => {\r\n        const { RackId } = arg;\r\n        return {\r\n          url: `${BASE_URL}/Get-Rack-Balance/${RackId}`,\r\n          method: \"GET\",\r\n          // params: { RackId },\r\n        };\r\n      },\r\n    }),\r\n\r\n    getReceivingLog: builder.query({\r\n      query: (arg) => {\r\n        const { userType } = arg;\r\n        return {\r\n          url: `${BASE_URL}/Receiving-Log`,\r\n          method: \"GET\",\r\n          params: { userType },\r\n        };\r\n      },\r\n    }),\r\n\r\n    getReleaseLog: builder.query({\r\n      query: (arg) => {\r\n        const { userType } = arg;\r\n        return {\r\n          url: `${BASE_URL}/Receiving-Log`,\r\n          method: \"GET\",\r\n          params: { userType },\r\n        };\r\n      },\r\n    }),\r\n    getMeasuringUnits: builder.query({\r\n      query: (arg) => {\r\n        // const { userType } = arg;\r\n        return {\r\n          url: `${BASE_URL}/Get-MeasureUnits`,\r\n          method: \"GET\",\r\n          // params: { userType },\r\n        };\r\n      },\r\n    }),\r\n\r\n   \r\n    // getAllCompanyCustomers: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { userType } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/company/getalluser`,\r\n    //       method: \"GET\",\r\n    //       params: { userType },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    // getAllTrips: builder.query({\r\n    //   query: (arg) => {\r\n    //     // const { userType } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/super-admin/getAllTripRequest`,\r\n    //       method: \"GET\",\r\n    //       // params: { userType },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    // getAllRidersForCompany: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { userId } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/super-admin/getallriderscompany`,\r\n    //       method: \"GET\",\r\n    //       params: { userId },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    getStats: builder.query({\r\n      query: (arg) => {\r\n        // const { userType } = arg;\r\n        return {\r\n          url: `${BASE_URL}/super-admin/userStatsChart`,\r\n          method: \"GET\",\r\n          // params: { userType },\r\n        };\r\n      },\r\n    }),\r\n  }),\r\n});\r\n\r\n// ;\r\n\r\nexport default ReportsApi;\r\n","import { SoftwrkApi } from \"configs/StoreQueryConfig\";\r\n\r\nconst BASE_URL = \"/req\";\r\n\r\nexport const ReqApi = SoftwrkApi.injectEndpoints({\r\n  endpoints: (builder) => ({\r\n    confirmRelease: builder.mutation({\r\n      query: (config) => ({\r\n        url: `${BASE_URL}/confirm-release`,\r\n        method: \"POST\",\r\n        ...config,\r\n      }),\r\n    }),\r\n    approval: builder.mutation({\r\n      query: (config) => ({\r\n        url: `${BASE_URL}/approval`,\r\n        method: \"POST\",\r\n        ...config,\r\n      }),\r\n    }),\r\n    request: builder.mutation({\r\n      query: (config) => ({\r\n        url: `${BASE_URL}/request`,\r\n        method: \"POST\",\r\n        ...config,\r\n      }),\r\n    }),\r\n\r\n    getRequest: builder.query({\r\n      query: (arg) => {\r\n        const { userType } = arg;\r\n        return {\r\n          url: `${BASE_URL}/`,\r\n          method: \"GET\",\r\n          // params: { userType },\r\n        };\r\n      },\r\n    }),\r\n\r\n    getRequestDetail: builder.query({\r\n      query: (arg) => {\r\n        const { RequestCode } = arg;\r\n        return {\r\n          url: `${BASE_URL}/Get-Request-Detail/${RequestCode}`,\r\n          method: \"GET\",\r\n          // params: { userType },\r\n        };\r\n      },\r\n    }),\r\n\r\n    getReleasedStocks: builder.query({\r\n      query: (arg) => {\r\n        const { RequestCode } = arg;\r\n        return {\r\n          url: `${BASE_URL}/Get-Released-Stocks/${RequestCode}`,\r\n          method: \"GET\",\r\n          // params: { userType },\r\n        };\r\n      },\r\n    }),\r\n\r\n   \r\n\r\n    getTagging: builder.query({\r\n      query: (arg) => {\r\n        const { userType } = arg;\r\n        return {\r\n          url: `${BASE_URL}/`,\r\n          method: \"GET\",\r\n          // params: { userType },\r\n        };\r\n      },\r\n    }),\r\n\r\n    getPendingRelease: builder.query({\r\n      query: (arg) => {\r\n        const { userType } = arg;\r\n        return {\r\n          url: `${BASE_URL}/Pending-Release`,\r\n          method: \"GET\",\r\n          // params: { userType },\r\n        };\r\n      },\r\n    }),\r\n\r\n    getProcessedApprovalRequest: builder.query({\r\n      query: (arg) => {\r\n        const { userType } = arg;\r\n        return {\r\n          url: `${BASE_URL}/Get-Processed-Approval-Requests`,\r\n          method: \"GET\",\r\n          // params: { userType },\r\n        };\r\n      },\r\n    }),\r\n\r\n    getCategories: builder.query({\r\n      query: (arg) => {\r\n        const { userType } = arg;\r\n        return {\r\n          url: `${BASE_URL}/category`,\r\n          method: \"GET\",\r\n          // params: { userType },\r\n        };\r\n      },\r\n    }),\r\n  }),\r\n});\r\n\r\n// ;\r\n\r\nexport default ReqApi;\r\n","import { SoftwrkApi } from \"configs/StoreQueryConfig\";\r\n\r\nconst BASE_URL = '/returns'\r\n\r\nexport const ReturnApi = SoftwrkApi.injectEndpoints({\r\n  endpoints: (builder) => ({\r\n    returnStock: builder.mutation({\r\n      query: (config) => ({\r\n        url: `${BASE_URL}`,\r\n        method: \"POST\",\r\n        ...config,\r\n      }),\r\n    }),\r\n\r\n    returnIntake: builder.mutation({\r\n      query: (config) => ({\r\n        url: `${BASE_URL}/Return-Intake`,\r\n        method: \"POST\",\r\n        ...config,\r\n      }),\r\n    }),\r\n\r\n    getStocksReturning: builder.query({\r\n      query: (arg) => {\r\n        const { userType } = arg;\r\n        return {\r\n          url: `${BASE_URL}/`,\r\n          method: \"GET\",\r\n          // params: { userType },\r\n        };\r\n      },\r\n    }),\r\n    // receiveStock: builder.mutation({\r\n    //   query: (config) => ({\r\n    //     url: `${BASE_URL}/receive-stock`,\r\n    //     method: \"POST\",\r\n    //     ...config,\r\n    //   }),\r\n    // }),\r\n    // receiveStomaterialReturnck: builder.mutation({\r\n    //   query: (config) => ({\r\n    //     url: `${BASE_URL}/Material-Return`,\r\n    //     method: \"POST\",\r\n    //     ...config,\r\n    //   }),\r\n    // }),\r\n\r\n    // getStores: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { userType } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}`,\r\n    //       method: \"GET\",\r\n    //       // params: { userType },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    // getShelvesByRackId: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { id } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/${id}`,\r\n    //       method: \"GET\",\r\n    //       // params: { userType },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    // getShelves: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { userType } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/shelves`,\r\n    //       method: \"GET\",\r\n    //       // params: { userType },\r\n    //     };\r\n    //   },\r\n    // }),\r\n    // getStoreLocations: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { userType } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/Get-Locations`,\r\n    //       method: \"GET\",\r\n    //       // params: { userType },\r\n    //     };\r\n    //   },\r\n    // }),\r\n    \r\n\r\n    // getStoreStock: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { userType } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/products`,\r\n    //       method: \"GET\",\r\n    //       // params: { userType },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    // getStoreTaggingDetail: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { deliveryItemId, unit } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/get-taggingDetail`,\r\n    //       method: \"GET\",\r\n    //       params: {  deliveryItemId, unit },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n\r\n    \r\n\r\n    // getTempStocks: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { userType } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/Get-TmpStocks`,\r\n    //       method: \"GET\",\r\n    //       // params: { userType },\r\n    //     };\r\n    //   },\r\n    // }),\r\n    // getItemDetail: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { itemId } = arg;\r\n    //     // console.log(pageNo);\r\n    //     return {\r\n    //       url: `${BASE_URL}/Get-ItemDetails/${itemId}/`,\r\n    //       method: \"GET\",\r\n    //       // params: { pageNo },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    // getStoreStocks: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { userType, pageNo } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/Get-Store-Stocks`,\r\n    //       method: \"GET\",\r\n    //       params: { userType, pageNo },\r\n    //     };\r\n    //   },\r\n    // }),\r\n    // getGlobalBin: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { ProjectType, Location} = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/Get-Global-Bincard`,\r\n    //       method: \"GET\",\r\n    //       // param nas: {  ProjectType, Location },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    // getBinCard: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { ProjectType, Location} = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/Get-BinCard`,\r\n    //       method: \"GET\",\r\n    //       params: {  ProjectType, Location },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    // getAllCompanyRiders: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { userType } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/company/getalluser`,\r\n    //       method: \"GET\",\r\n    //       params: { userType },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    // getAllCompanyCustomers: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { userType } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/company/getalluser`,\r\n    //       method: \"GET\",\r\n    //       params: { userType },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    // getAllTrips: builder.query({\r\n    //   query: (arg) => {\r\n    //     // const { userType } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/super-admin/getAllTripRequest`,\r\n    //       method: \"GET\",\r\n    //       // params: { userType },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    // getAllRidersForCompany: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { userId } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/super-admin/getallriderscompany`,\r\n    //       method: \"GET\",\r\n    //       params: { userId },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    // getStats: builder.query({\r\n    //   query: (arg) => {\r\n    //     // const { userType } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/super-admin/userStatsChart`,\r\n    //       method: \"GET\",\r\n    //       // params: { userType },\r\n    //     };\r\n    //   },\r\n    // }),\r\n  }),\r\n});\r\n\r\n// ;\r\n\r\nexport default ReturnApi;\r\n","import { SoftwrkApi } from \"configs/StoreQueryConfig\";\r\n\r\nconst BASE_URL = \"/stocks\";\r\n\r\nexport const StockApi = SoftwrkApi.injectEndpoints({\r\n  endpoints: (builder) => ({\r\n    // signup: builder.mutation({\r\n    //   query: (config) => ({\r\n    //     url: `${BASE_URL}/signup`,\r\n    //     method: \"POST\",\r\n    //     ...config,\r\n    //   }),\r\n    // }),\r\n    stockIntake: builder.mutation({\r\n      query: (config) => ({\r\n        url: `${BASE_URL}/intake`,\r\n        method: \"POST\",\r\n        ...config,\r\n      }),\r\n    }),\r\n    stockTransferIntake: builder.mutation({\r\n      query: (config) => ({\r\n        url: `${BASE_URL}/Transfer-Intake`,\r\n        method: \"POST\",\r\n        ...config,\r\n      }),\r\n    }),\r\n    stockOutbound: builder.mutation({\r\n      query: (config) => ({\r\n        url: `${BASE_URL}/Outbound`,\r\n        method: \"POST\",\r\n        ...config,\r\n      }),\r\n    }),\r\n\r\n    getIntakes: builder.query({\r\n      query: (arg) => {\r\n        // const { userType } = arg;\r\n        return {\r\n          url: `${BASE_URL}/intakes`,\r\n          method: \"GET\",\r\n          // params: { userType },\r\n        };\r\n      },\r\n    }),\r\n  }),\r\n});\r\n\r\n// ;\r\n\r\nexport default StockApi;\r\n","import { SoftwrkApi } from \"configs/StoreQueryConfig\";\r\n\r\nconst BASE_URL = '/store'\r\n\r\nexport const StoreApi = SoftwrkApi.injectEndpoints({\r\n  endpoints: (builder) => ({\r\n    // receiveStock: builder.mutation({\r\n    //   query: (config) => ({\r\n    //     url: `${BASE_URL}/Receive-Stock`,\r\n    //     method: \"POST\",\r\n    //     ...config,\r\n    //   }),\r\n    // }),\r\n    // receiveStock: builder.mutation({\r\n    //   query: (config) => ({\r\n    //     url: `${BASE_URL}/receive-stock`,\r\n    //     method: \"POST\",\r\n    //     ...config,\r\n    //   }),\r\n    // }),\r\n    // receiveStomaterialReturnck: builder.mutation({\r\n    //   query: (config) => ({\r\n    //     url: `${BASE_URL}/Material-Return`,\r\n    //     method: \"POST\",\r\n    //     ...config,\r\n    //   }),\r\n    // }),\r\n\r\n    getStores: builder.query({\r\n      query: (arg) => {\r\n        const { userType } = arg;\r\n        return {\r\n          url: `${BASE_URL}`,\r\n          method: \"GET\",\r\n          // params: { userType },\r\n        };\r\n      },\r\n    }),\r\n\r\n    getShelvesByRackId: builder.query({\r\n      query: (arg) => {\r\n        const { id } = arg;\r\n        return {\r\n          url: `${BASE_URL}/${id}`,\r\n          method: \"GET\",\r\n          // params: { userType },\r\n        };\r\n      },\r\n    }),\r\n\r\n    getShelves: builder.query({\r\n      query: (arg) => {\r\n        const { userType } = arg;\r\n        return {\r\n          url: `${BASE_URL}/shelves`,\r\n          method: \"GET\",\r\n          // params: { userType },\r\n        };\r\n      },\r\n    }),\r\n    // getStoreLocations: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { userType } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/Get-Locations`,\r\n    //       method: \"GET\",\r\n    //       // params: { userType },\r\n    //     };\r\n    //   },\r\n    // }),\r\n    \r\n\r\n    // getStoreStock: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { userType } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/products`,\r\n    //       method: \"GET\",\r\n    //       // params: { userType },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    // getStoreTaggingDetail: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { deliveryItemId, unit } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/get-taggingDetail`,\r\n    //       method: \"GET\",\r\n    //       params: {  deliveryItemId, unit },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n\r\n    \r\n\r\n    // getTempStocks: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { userType } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/Get-TmpStocks`,\r\n    //       method: \"GET\",\r\n    //       // params: { userType },\r\n    //     };\r\n    //   },\r\n    // }),\r\n    // getItemDetail: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { itemId } = arg;\r\n    //     // console.log(pageNo);\r\n    //     return {\r\n    //       url: `${BASE_URL}/Get-ItemDetails/${itemId}/`,\r\n    //       method: \"GET\",\r\n    //       // params: { pageNo },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    // getStoreStocks: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { userType, pageNo } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/Get-Store-Stocks`,\r\n    //       method: \"GET\",\r\n    //       params: { userType, pageNo },\r\n    //     };\r\n    //   },\r\n    // }),\r\n    // getGlobalBin: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { ProjectType, Location} = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/Get-Global-Bincard`,\r\n    //       method: \"GET\",\r\n    //       // param nas: {  ProjectType, Location },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    // getBinCard: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { ProjectType, Location} = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/Get-BinCard`,\r\n    //       method: \"GET\",\r\n    //       params: {  ProjectType, Location },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    // getAllCompanyRiders: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { userType } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/company/getalluser`,\r\n    //       method: \"GET\",\r\n    //       params: { userType },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    // getAllCompanyCustomers: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { userType } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/company/getalluser`,\r\n    //       method: \"GET\",\r\n    //       params: { userType },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    // getAllTrips: builder.query({\r\n    //   query: (arg) => {\r\n    //     // const { userType } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/super-admin/getAllTripRequest`,\r\n    //       method: \"GET\",\r\n    //       // params: { userType },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    // getAllRidersForCompany: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { userId } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/super-admin/getallriderscompany`,\r\n    //       method: \"GET\",\r\n    //       params: { userId },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    getStats: builder.query({\r\n      query: (arg) => {\r\n        // const { userType } = arg;\r\n        return {\r\n          url: `${BASE_URL}/super-admin/userStatsChart`,\r\n          method: \"GET\",\r\n          // params: { userType },\r\n        };\r\n      },\r\n    }),\r\n  }),\r\n});\r\n\r\n// ;\r\n\r\nexport default StoreApi;\r\n","import React from \"react\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Select from \"@mui/material/Select\";\r\nimport MenuItem from \"@mui/material/MenuItem\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport InputLabel from \"@mui/material/InputLabel\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Table from \"@mui/material/Table\";\r\nimport TableBody from \"@mui/material/TableBody\";\r\nimport TableCell from \"@mui/material/TableCell\";\r\nimport TableContainer from \"@mui/material/TableContainer\";\r\nimport TableHead from \"@mui/material/TableHead\";\r\nimport TableRow from \"@mui/material/TableRow\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport { Autocomplete, Card, Typography } from \"@mui/material\";\r\nimport UserApi from \"apis/UserApi\";\r\nimport StockApi from \"apis/StockApi\";\r\nimport RackApi from \"apis/RackApi\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport ReportsApi from \"apis/ReportsApi\";\r\nimport moment from \"moment\";\r\nimport DeliveryApi from \"apis/DeliveryApi\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport StoreApi from \"apis/StoreApi\";\r\nimport ReqApi from \"apis/ReqApi\";\r\nimport { ArrowBackTwoTone } from \"@mui/icons-material\";\r\nimport ReturnApi from \"apis/ReturnApi\";\r\n\r\nconst StockIntake = () => {\r\n  const [formData, setFormData] = React.useState({\r\n    rack: \"\",\r\n    // rackId:'',\r\n    shelfCode: \"\",\r\n    shelfCode1: \"\",\r\n    productBarcode: \"\",\r\n    quantity: 0,\r\n  });\r\n  const { enqueueSnackbar } = useSnackbar();\r\n\r\n  const [TaggingId, setTaggingId] = React.useState();\r\n  const [RequestCode, setRequestCode] = React.useState();\r\n  const [requestObj, setrequestObj] = React.useState();\r\n  const [isLoading, setisLoading] = React.useState(false);\r\n\r\n  const [incomingRequest, setIncomingRequest] = React.useState();\r\n\r\n  const redirect = useNavigate();\r\n\r\n  // StoreStocks\r\n  const getRacksQueryResult = RackApi.useGetRackQuery({});\r\n  const rack = getRacksQueryResult?.data;\r\n\r\n  const [stockConfirmReleaseMuation, stockConfirmReleaseMutationResult] =\r\n    StockApi.useStockTransferIntakeMutation();\r\n\r\n  const getShelvesByRackQueryResult = RackApi.useGetShelvesByRackIdQuery({\r\n    id: formData.rack,\r\n  });\r\n  const shelvesByRack = getShelvesByRackQueryResult?.data || [];\r\n\r\n  const getShelvesQueryResult = RackApi.useGetShelvesQuery({});\r\n  const shelves = getShelvesQueryResult?.data || [];\r\n\r\n  const getProductsQuery = UserApi.useGetStoreProductsQuery({ TaggingId });\r\n  const products = getProductsQuery?.data || [];\r\n\r\n  const getReturningProducts = ReturnApi.useGetStocksReturningQuery({\r\n    TaggingId,\r\n  });\r\n  const returningProducts = getReturningProducts?.data || [];\r\n\r\n  const getAllDeliveryQuery = DeliveryApi.useGetAllDeliveriesQuery();\r\n  const allDeliveries = getAllDeliveryQuery.data || [];\r\n\r\n  const [stockIntakeMuation, stockIntakeMutationResult] =\r\n    ReturnApi.useReturnIntakeMutation();\r\n\r\n  const getStoreStocksQueryResult = UserApi.useGetStoreStocksQuery({\r\n    TaggingId,\r\n  });\r\n  const getRequestsQueryResult = ReqApi.useGetRequestQuery({\r\n    TaggingId,\r\n  });\r\n  const requests = getRequestsQueryResult?.data || [];\r\n\r\n  const getRequestsDetailsQueryResult = ReqApi.useGetReleasedStocksQuery({\r\n    RequestCode,\r\n  });\r\n  const requestsDetails = getRequestsDetailsQueryResult?.data || [];\r\n\r\n  const storeStockInStore = getStoreStocksQueryResult?.data || [];\r\n\r\n  const getProductsInStoresResult = ReportsApi.useGetProductBalancesQuery({});\r\n  const productsInStore = getProductsInStoresResult?.data || [];\r\n\r\n  const getStoreQueryResult = StoreApi.useGetStoresQuery({});\r\n  const stores = getStoreQueryResult?.data || [];\r\n\r\n  // const getStoresQueryResult = StoreApi.useGetStoresQuery({});\r\n  // const stores = getStoresQueryResult?.data;\r\n\r\n  const [receiveStockMuation, receiveStockMutationResult] =\r\n    UserApi.useReceiveStockMutation();\r\n\r\n  const data = [\r\n    {\r\n      id: 1,\r\n      column1: \"\",\r\n      column2: \"\",\r\n      column3: \"\",\r\n      column4: \"\",\r\n      column5: \"\",\r\n      column6: \"\",\r\n    },\r\n    {\r\n      id: 2,\r\n      column1: \"\",\r\n      column2: \"\",\r\n      column3: \"\",\r\n      column4: \"\",\r\n      column5: \"\",\r\n      column6: \"\",\r\n    },\r\n    // Add more data as needed\r\n  ];\r\n\r\n  const dataApproval = [\r\n    { store: \"Store A\", dateCreated: \"2023-01-15\", items: 50 },\r\n    { store: \"Store B\", dateCreated: \"2023-02-10\", items: 30 },\r\n    { store: \"Store C\", dateCreated: \"2023-03-05\", items: 70 },\r\n    // Add more data entries here\r\n  ];\r\n\r\n  const postIntake = async () => {\r\n    setisLoading(true);\r\n    // let payload = {\r\n    //   shelfCode: formData.shelfCode,\r\n    //   productBarcode: products?.find(\r\n    //     (prod) => prod?.id === formData.productBarcode\r\n    //   )?.barcode,\r\n    //   quantity: +formData.quantity,\r\n    // };\r\n\r\n    let payload = {\r\n      returnLogId: incomingRequest?.logId,\r\n      shelfId: formData.shelfCode,\r\n      quantity: +formData.quantity,\r\n      // quantity: 0,\r\n    };\r\n\r\n    if (+formData.quantity == 0) {\r\n      enqueueSnackbar(\"Failed! Quantity cannot be Zero\", {\r\n        variant: \"error\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    console.log(payload);\r\n    try {\r\n      setisLoading(false);\r\n\r\n      const data = await stockIntakeMuation({ data: payload }).unwrap();\r\n      // TODO extra login\r\n      // console.log(data.data);\r\n      enqueueSnackbar(\"successful\", { variant: \"success\" });\r\n      // setRefreshD((orev)=>orev+1)\r\n      redirect(\"/receiving-log\");\r\n    } catch (error) {\r\n      setisLoading(false);\r\n\r\n      console.log(error);\r\n      enqueueSnackbar(error?.data, \"Failed to login\", {\r\n        variant: \"error\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setFormData({\r\n      ...formData,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    // Handle form submission with formData\r\n  };\r\n\r\n  const catchRequestId = (row) => {\r\n    setRequestCode(row.code);\r\n    setrequestObj(row);\r\n    console.log(row.code);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {/* <Button onClick={() => redirect(\"/receiving-log\")}>Redirect</Button> */}\r\n      <Typography className=\"text-center font-bold my-5\" variant=\"h4\">\r\n        Stock Intake\r\n      </Typography>\r\n      <div className=\"flex gap-6\">\r\n        <div title=\"\" className=\"px-8 py-4 w-full bg-black rounded-2xl\">\r\n          <div className=\"mb-5\">\r\n            <div className=\"flex gap-6\">\r\n              <div className=\"flex justify-between gap-6 w-full\">\r\n                <div className=\"\">\r\n                  <Typography className=\"text-white mb-2 ml-3\">\r\n                    Select Incoming Request\r\n                  </Typography>\r\n\r\n                  <FormControl fullWidth>\r\n                    {/* <InputLabel>Select Field</InputLabel> */}\r\n                    <Autocomplete\r\n                      className=\"m-2\"\r\n                      disablePortal\r\n                      onChange={(event, newValue) =>\r\n                        // handleChange(event, newValue)\r\n                        {\r\n                          setFormData({ ...formData, rack: newValue?.label });\r\n                          setIncomingRequest(newValue?.id);\r\n                        }\r\n                      }\r\n                      // id=\"combo-box-demo\"\r\n                      options={returningProducts?.map((e) => ({\r\n                        label: e?.requestCode,\r\n                        id: e,\r\n                      }))}\r\n                      sx={{ minWidth: 200 }}\r\n                      renderInput={(params) => <TextField {...params} />}\r\n                    />\r\n                  </FormControl>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"mt-5\">\r\n            <Typography\r\n              className=\"text-white w-full text-center mb-4\"\r\n              variant=\"h5\"\r\n            >\r\n              Request Details\r\n            </Typography>\r\n\r\n            <div>\r\n              <TableContainer component={Paper}>\r\n                <Table>\r\n                  <TableHead>\r\n                    <TableRow>\r\n                      <TableCell className=\"font-bold\">Request Code</TableCell>\r\n                      <TableCell>{incomingRequest?.requestCode}</TableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    <TableRow>\r\n                      <TableCell className=\"font-bold\">Product</TableCell>\r\n                      <TableCell>{incomingRequest?.product}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                      <TableCell className=\"font-bold\">Product Code</TableCell>\r\n                      <TableCell>{incomingRequest?.productCode}</TableCell>\r\n                    </TableRow>\r\n\r\n                    <TableRow>\r\n                      <TableCell className=\"font-bold\">Requested</TableCell>\r\n                      <TableCell>{incomingRequest?.requested}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                      <TableCell className=\"font-bold\">Returned</TableCell>\r\n                      <TableCell>{incomingRequest?.returned}</TableCell>\r\n                    </TableRow>\r\n                  </TableBody>\r\n                </Table>\r\n              </TableContainer>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"mt-4\">\r\n            <Typography\r\n              className=\"text-white w-full text-center mt-12 mb-8\"\r\n              variant=\"h5\"\r\n            >\r\n              Select Parameters\r\n            </Typography>\r\n\r\n            <div className=\"flex gap-4\">\r\n              <div className=\"w-full\">\r\n                <Typography className=\"text-white mb-2 ml-3 w-full\">\r\n                  Select Store\r\n                </Typography>\r\n                <FormControl className=\"w-full\" fullWidth>\r\n                  {/* <InputLabel>Select Field</InputLabel> */}\r\n                  <Select\r\n                    className=\"bg-white w-full\"\r\n                    name=\"storeId\"\r\n                    value={formData.storeId}\r\n                    onChange={handleChange}\r\n                  >\r\n                    {stores?.map((e) => (\r\n                      <MenuItem value={e?.id}>{e?.name}</MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n              </div>\r\n\r\n              <div className=\"\">\r\n                <Typography className=\"text-white mb-2 ml-3\">\r\n                  Select Rack\r\n                </Typography>\r\n\r\n                <FormControl fullWidth>\r\n                  {/* <InputLabel>Select Field</InputLabel> */}\r\n                  <Autocomplete\r\n                    className=\"m-2\"\r\n                    disablePortal\r\n                    onChange={\r\n                      (event, newValue) =>\r\n                        // handleChange(event, newValue)\r\n                        setFormData({ ...formData, rack: newValue?.id })\r\n                      // console.log(newValue)\r\n                    }\r\n                    // id=\"combo-box-demo\"\r\n                    options={rack\r\n                      ?.filter((e) => e?.storeId == formData.storeId)\r\n                      ?.map((e) => ({\r\n                        label: e?.name,\r\n                        id: e?.id,\r\n                      }))}\r\n                    sx={{ minWidth: 200 }}\r\n                    renderInput={(params) => <TextField {...params} />}\r\n                  />\r\n                </FormControl>\r\n              </div>\r\n              <div className=\"w-full\">\r\n                <Typography className=\"text-white mb-2 ml-3 w-full\">\r\n                  Select Shelf\r\n                </Typography>\r\n                <FormControl className=\"w-full\" fullWidth>\r\n                  <Select\r\n                    className=\"bg-white w-full\"\r\n                    name=\"shelfCode\"\r\n                    value={formData.shelfCode}\r\n                    onChange={handleChange}\r\n                  >\r\n                    {shelvesByRack?.shelves?.map((e) => (\r\n                      <MenuItem value={e?.id}>{e?.label}</MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n              </div>\r\n\r\n              <div className=\"w-full\">\r\n                <Typography className=\"text-white mb-2 ml-3 w-full\">\r\n                  Quantity\r\n                </Typography>\r\n                {/* <InputLabel>Select Field</InputLabel> */}\r\n                <TextField\r\n                  className=\"bg-white rounded-full w-full min-w-[100px]\"\r\n                  // label=\"Field 1\"\r\n                  name=\"quantity\"\r\n                  value={formData.quantity}\r\n                  onChange={handleChange}\r\n                  fullWidth\r\n                  placeholder=\"Click to input Quantity\"\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"flex justify-center w-full mt-6\">\r\n              <Button\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n                // color=\"primary\"\r\n                className=\"p-3 w-1/2 bg-[#2BDF27] flex justify-center gap-9 items-center text-base mb-6\"\r\n                // onClick={() => localStorage.setItem('type', 'CLIENT')}\r\n                // className=' '\r\n                disabled={isLoading}\r\n                onClick={postIntake}\r\n              >\r\n                {isLoading && (\r\n                  <div class=\"flex items-center justify-center\">\r\n                    <div class=\"border-t-4 border-white border-solid rounded-full animate-spin h-4 w-4\"></div>\r\n                  </div>\r\n                )}\r\n                Return to shelf\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StockIntake;\r\n"],"names":["BASE_URL","SoftwrkApi","endpoints","builder","finalDelivery","mutation","query","config","url","concat","method","discard","stockDelivery","getAllDeliveries","arg","getTempDeliveries","userType","productRack","createRacks","getRack","reloadItems","getRackShelves","getShelvesByRackId","id","getShelves","getProductsByRack","RackId","getStats","getSkuStocks","productId","getStocksByLocation","locationId","getProductBalances","getAllProductsBalance","getAuditLogs","pageNo","console","log","params","getTransactionLogs","From","To","filter","getRackBalance","getReceivingLog","getReleaseLog","getMeasuringUnits","confirmRelease","approval","request","getRequest","getRequestDetail","RequestCode","getReleasedStocks","getTagging","getPendingRelease","getProcessedApprovalRequest","getCategories","returnStock","returnIntake","getStocksReturning","stockIntake","stockTransferIntake","stockOutbound","getIntakes","getStores","StockIntake","_rack$filter","_shelvesByRack$shelve","formData","setFormData","React","rack","shelfCode","shelfCode1","productBarcode","quantity","enqueueSnackbar","useSnackbar","TaggingId","setTaggingId","setRequestCode","requestObj","setrequestObj","isLoading","setisLoading","incomingRequest","setIncomingRequest","redirect","useNavigate","getRacksQueryResult","RackApi","data","stockConfirmReleaseMuation","stockConfirmReleaseMutationResult","StockApi","getShelvesByRackQueryResult","shelvesByRack","getShelvesQueryResult","getProductsQuery","UserApi","getReturningProducts","ReturnApi","returningProducts","stockIntakeMuation","stockIntakeMutationResult","DeliveryApi","getStoreStocksQueryResult","getRequestsQueryResult","ReqApi","getRequestsDetailsQueryResult","getProductsInStoresResult","ReportsApi","getStoreQueryResult","StoreApi","stores","receiveStockMuation","receiveStockMutationResult","handleChange","event","name","value","target","_jsxs","children","_jsx","Typography","className","variant","title","FormControl","fullWidth","Autocomplete","disablePortal","onChange","newValue","label","options","map","e","requestCode","sx","minWidth","renderInput","TextField","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","TableBody","product","productCode","requested","returned","Select","storeId","MenuItem","shelves","placeholder","class","Button","type","disabled","onClick","async","payload","returnLogId","logId","shelfId","unwrap","error"],"sourceRoot":""}