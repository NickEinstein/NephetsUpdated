{"version":3,"file":"static/js/6544.126c5429.chunk.js","mappings":"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","sources":["apis/RackApi.js","apis/ReportsApi.js","features/dashboard/ExportToExcel.js","features/stock/StockBalanceByRack.js"],"sourcesContent":["import { SoftwrkApi } from \"configs/StoreQueryConfig\";\r\n\r\nconst BASE_URL = \"/rack\";\r\n\r\nexport const UserApi = SoftwrkApi.injectEndpoints({\r\n  endpoints: (builder) => ({\r\n    // receiveStock: builder.mutation({\r\n    //   query: (config) => ({\r\n    //     url: `${BASE_URL}/Receive-Stock`,\r\n    //     method: \"POST\",\r\n    //     ...config,\r\n    //   }),\r\n    // }),\r\n    productRack: builder.mutation({\r\n      query: (config) => ({\r\n        url: `${BASE_URL}/Product-Rack`,\r\n        method: \"PUT\",\r\n        ...config,\r\n      }),\r\n    }),\r\n    createRacks: builder.mutation({\r\n      query: (config) => ({\r\n        url: `${BASE_URL}/`,\r\n        method: \"POST\",\r\n        ...config,\r\n      }),\r\n    }),\r\n\r\n    getRack: builder.query({\r\n      query: (arg) => {\r\n        const { reloadItems } = arg;\r\n        return {\r\n          url: `${BASE_URL}`,\r\n          method: \"GET\",\r\n          // params: { reloadItems },\r\n        };\r\n      },\r\n    }),\r\n\r\n    getRackShelves: builder.query({\r\n      query: (arg) => {\r\n        const { reloadItems } = arg;\r\n        return {\r\n          url: `${BASE_URL}/shelves`,\r\n          method: \"GET\",\r\n          // params: { reloadItems },\r\n        };\r\n      },\r\n    }),\r\n\r\n    getShelvesByRackId: builder.query({\r\n      query: (arg) => {\r\n        const { id } = arg;\r\n        return {\r\n          url: `${BASE_URL}/${id}`,\r\n          method: \"GET\",\r\n          // params: { userType },\r\n        };\r\n      },\r\n    }),\r\n\r\n    getShelves: builder.query({\r\n      query: (arg) => {\r\n        const { userType } = arg;\r\n        return {\r\n          url: `${BASE_URL}/shelves`,\r\n          method: \"GET\",\r\n          // params: { userType },\r\n        };\r\n      },\r\n    }),\r\n    getProductsByRack: builder.query({\r\n      query: (arg) => {\r\n        const { RackId } = arg;\r\n        return {\r\n          url: `${BASE_URL}/Rack-Products/${RackId}`,\r\n          method: \"GET\",\r\n          // params: { RackId },\r\n        };\r\n      },\r\n    }),\r\n\r\n    // getStoreStock: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { userType } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/products`,\r\n    //       method: \"GET\",\r\n    //       // params: { userType },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    // getStoreTaggingDetail: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { deliveryItemId, unit } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/get-taggingDetail`,\r\n    //       method: \"GET\",\r\n    //       params: {  deliveryItemId, unit },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    // getTempStocks: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { userType } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/Get-TmpStocks`,\r\n    //       method: \"GET\",\r\n    //       // params: { userType },\r\n    //     };\r\n    //   },\r\n    // }),\r\n    // getItemDetail: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { itemId } = arg;\r\n    //     // console.log(pageNo);\r\n    //     return {\r\n    //       url: `${BASE_URL}/Get-ItemDetails/${itemId}/`,\r\n    //       method: \"GET\",\r\n    //       // params: { pageNo },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    // getStoreStocks: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { userType, pageNo } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/Get-Store-Stocks`,\r\n    //       method: \"GET\",\r\n    //       params: { userType, pageNo },\r\n    //     };\r\n    //   },\r\n    // }),\r\n    // getGlobalBin: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { ProjectType, Location} = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/Get-Global-Bincard`,\r\n    //       method: \"GET\",\r\n    //       // param nas: {  ProjectType, Location },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    // getBinCard: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { ProjectType, Location} = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/Get-BinCard`,\r\n    //       method: \"GET\",\r\n    //       params: {  ProjectType, Location },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    // getAllCompanyRiders: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { userType } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/company/getalluser`,\r\n    //       method: \"GET\",\r\n    //       params: { userType },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    // getAllCompanyCustomers: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { userType } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/company/getalluser`,\r\n    //       method: \"GET\",\r\n    //       params: { userType },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    // getAllTrips: builder.query({\r\n    //   query: (arg) => {\r\n    //     // const { userType } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/super-admin/getAllTripRequest`,\r\n    //       method: \"GET\",\r\n    //       // params: { userType },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    // getAllRidersForCompany: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { userId } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/super-admin/getallriderscompany`,\r\n    //       method: \"GET\",\r\n    //       params: { userId },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    getStats: builder.query({\r\n      query: (arg) => {\r\n        // const { userType } = arg;\r\n        return {\r\n          url: `${BASE_URL}/super-admin/userStatsChart`,\r\n          method: \"GET\",\r\n          // params: { userType },\r\n        };\r\n      },\r\n    }),\r\n  }),\r\n});\r\n\r\n// ;\r\n\r\nexport default UserApi;\r\n","import { SoftwrkApi } from \"configs/StoreQueryConfig\";\r\n\r\nconst BASE_URL = \"/Reports\";\r\n\r\nexport const ReportsApi = SoftwrkApi.injectEndpoints({\r\n  endpoints: (builder) => ({\r\n    // signup: builder.mutation({\r\n    //   query: (config) => ({\r\n    //     url: `${BASE_URL}/signup`,\r\n    //     method: \"POST\",\r\n    //     ...config,\r\n    //   }),\r\n    // }),\r\n    // stockDelivery: builder.mutation({\r\n    //   query: (config) => ({\r\n    //     url: `${BASE_URL}/add-delivery-Item`,\r\n    //     method: \"POST\",\r\n    //     ...config,\r\n    //   }),\r\n    // }),\r\n\r\n    getSkuStocks: builder.query({\r\n      query: (arg) => {\r\n        const { productId } = arg;\r\n        return {\r\n          url: `${BASE_URL}/Get-Stocks-SKU/${productId}`,\r\n          method: \"GET\",\r\n          //   params: { productId },\r\n        };\r\n      },\r\n    }),\r\n    getStocksByLocation: builder.query({\r\n      query: (arg) => {\r\n        const { locationId } = arg;\r\n        return {\r\n          url: `${BASE_URL}/Get-Stocks-Location/${locationId}`,\r\n          method: \"GET\",\r\n          //   params: { productId },\r\n        };\r\n      },\r\n    }),\r\n\r\n    getProductBalances: builder.query({\r\n      // Get-Products-Balances\r\n      query: (arg) => {\r\n        const { userType } = arg;\r\n        return {\r\n          url: `${BASE_URL}/Get-Products-Store-Balances`,\r\n          method: \"GET\",\r\n          // params: { userType },\r\n        };\r\n      },\r\n    }),\r\n\r\n\r\n    getAllProductsBalance: builder.query({\r\n      query: (arg) => {\r\n        const { userType } = arg;\r\n        return {\r\n          url: `${BASE_URL}/Get-Products-Balances`,\r\n          method: \"GET\",\r\n          // params: { userType },\r\n        };\r\n      },\r\n    }),\r\n    getAuditLogs: builder.query({\r\n      query: (arg) => {\r\n        const { pageNo } = arg;\r\n        console.log(pageNo);\r\n        return {\r\n          url: `${BASE_URL}/Get-AuditLogs`,\r\n          method: \"GET\",\r\n          params: { pageNo },\r\n        };\r\n      },\r\n    }),\r\n\r\n    getTransactionLogs: builder.query({\r\n      query: (arg) => {\r\n        const { From, To, filter } = arg;\r\n        // console.log(pageNo);\r\n        return {\r\n          url: `${BASE_URL}/Get-TransactionLogs`,\r\n          method: \"GET\",\r\n          params: { From, To, filter  },\r\n        };\r\n      },\r\n    }),\r\n    getRackBalance: builder.query({\r\n      query: (arg) => {\r\n        const { RackId } = arg;\r\n        return {\r\n          url: `${BASE_URL}/Get-Rack-Balance/${RackId}`,\r\n          method: \"GET\",\r\n          // params: { RackId },\r\n        };\r\n      },\r\n    }),\r\n\r\n    getReceivingLog: builder.query({\r\n      query: (arg) => {\r\n        const { userType } = arg;\r\n        return {\r\n          url: `${BASE_URL}/Receiving-Log`,\r\n          method: \"GET\",\r\n          params: { userType },\r\n        };\r\n      },\r\n    }),\r\n\r\n    getReleaseLog: builder.query({\r\n      query: (arg) => {\r\n        const { userType } = arg;\r\n        return {\r\n          url: `${BASE_URL}/Receiving-Log`,\r\n          method: \"GET\",\r\n          params: { userType },\r\n        };\r\n      },\r\n    }),\r\n    getMeasuringUnits: builder.query({\r\n      query: (arg) => {\r\n        // const { userType } = arg;\r\n        return {\r\n          url: `${BASE_URL}/Get-MeasureUnits`,\r\n          method: \"GET\",\r\n          // params: { userType },\r\n        };\r\n      },\r\n    }),\r\n\r\n   \r\n    // getAllCompanyCustomers: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { userType } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/company/getalluser`,\r\n    //       method: \"GET\",\r\n    //       params: { userType },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    // getAllTrips: builder.query({\r\n    //   query: (arg) => {\r\n    //     // const { userType } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/super-admin/getAllTripRequest`,\r\n    //       method: \"GET\",\r\n    //       // params: { userType },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    // getAllRidersForCompany: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { userId } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/super-admin/getallriderscompany`,\r\n    //       method: \"GET\",\r\n    //       params: { userId },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    getStats: builder.query({\r\n      query: (arg) => {\r\n        // const { userType } = arg;\r\n        return {\r\n          url: `${BASE_URL}/super-admin/userStatsChart`,\r\n          method: \"GET\",\r\n          // params: { userType },\r\n        };\r\n      },\r\n    }),\r\n  }),\r\n});\r\n\r\n// ;\r\n\r\nexport default ReportsApi;\r\n","// import React from \"react\";\r\n// import { CSVLink } from \"react-csv\";\r\n\r\n// const ExportToExcel = () => {\r\n//   const data = [\r\n//     // Bold headers row\r\n//     [\r\n//       { value: \"Name\", style: { bold: true } },\r\n//       { value: \"Age\", style: { bold: true } },\r\n//       { value: \"Country\", style: { bold: true } },\r\n//     ],\r\n//     // Data rows\r\n//     [\"John Doe\", 25, \"USA\"],\r\n//     [\"Jane Smith\", 30, \"Canada\"],\r\n//     // Add more rows as needed\r\n//   ];\r\n\r\n//   const excelTitle = \"My Excel Sheet\";\r\n\r\n//   return (\r\n//     <div>\r\n//       <h1>Export Data to Excel</h1>\r\n//       <table>\r\n//         <tbody>\r\n//           {data.map((row, index) => (\r\n//             <tr key={index}>\r\n//               {row.map((cell, cellIndex) => (\r\n//                 <td key={cellIndex} style={cell.style}>\r\n//                   {cell.value}\r\n//                 </td>\r\n//               ))}\r\n//             </tr>\r\n//           ))}\r\n//         </tbody>\r\n//       </table>\r\n\r\n//       <CSVLink data={data} filename={\"exported-data.csv\"} target=\"_blank\">\r\n//         {excelTitle}\r\n//       </CSVLink>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default ExportToExcel;\r\n\r\nimport { Button } from \"@mui/material\";\r\nimport React from \"react\";\r\nimport { useEffect } from \"react\";\r\n// import { Table, Button } from 'antd';\r\n// import { ExcelOutlined } from '@ant-design/icons';\r\nimport * as XLSX from \"xlsx\";\r\n\r\nconst ExportToExcel = ({ data, header }) => {\r\n  // Sample data for the Ant Design table\r\n  let dataSource = [];\r\n  // { key: \"1\", name: \"John Doe\", age: 25, country: \"USA\" },\r\n  // { key: \"2\", name: \"Jane Smith\", age: 30, country: \"Canada\" },\r\n  // Add more data as needed\r\n\r\n  //   console.log(data);\r\n\r\n  useEffect(() => {\r\n    // console.log(data);\r\n    dataSource = data;\r\n  }, [data]);\r\n\r\n  // Columns configuration for the Ant Design table\r\n  const columns = header.map((e) => ({\r\n    title: e?.toUpperCase(),\r\n    dataIndex: e.toLowerCase(),\r\n    key: e,\r\n  }));\r\n\r\n  // { title: \"Age\", dataIndex: \"age\", key: \"age\" },\r\n  // { title: \"Country\", dataIndex: \"country\", key: \"country\" },\r\n  // Add more columns as needed\r\n\r\n  const exportToExcel = () => {\r\n    // Create a worksheet with bold headers\r\n    const ws = XLSX.utils.aoa_to_sheet([\r\n      columns.map((column) => ({\r\n        t: \"s\",\r\n        v: column.title,\r\n        s: { font: { bold: true } },\r\n      })),\r\n      ...dataSource.map((record) =>\r\n        columns.map((column) => record[column.dataIndex])\r\n      ),\r\n    ]);\r\n\r\n    const wb = XLSX.utils.book_new();\r\n    XLSX.utils.book_append_sheet(wb, ws, \"Sheet1\");\r\n    XLSX.writeFile(wb, \"exported-data.xlsx\");\r\n  };\r\n\r\n  return (\r\n    <div>\r\n    \r\n\r\n      <Button type=\"primary\" onClick={exportToExcel}>\r\n        Export to Excel\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExportToExcel;\r\n","import React, { useState } from \"react\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Select from \"@mui/material/Select\";\r\nimport MenuItem from \"@mui/material/MenuItem\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport InputLabel from \"@mui/material/InputLabel\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Table from \"@mui/material/Table\";\r\nimport TableBody from \"@mui/material/TableBody\";\r\nimport TableCell from \"@mui/material/TableCell\";\r\nimport TableContainer from \"@mui/material/TableContainer\";\r\nimport TableHead from \"@mui/material/TableHead\";\r\nimport TableRow from \"@mui/material/TableRow\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport { Card, Checkbox, TablePagination, Typography } from \"@mui/material\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport UserApi from \"apis/UserApi\";\r\nimport ReportsApi from \"apis/ReportsApi\";\r\nimport RackApi from \"apis/RackApi\";\r\nimport ExportToExcel from \"features/dashboard/ExportToExcel\";\r\nimport moment from \"moment\";\r\n\r\nconst StockBalanceRack = () => {\r\n  //   const [projectId, setProjectId] = useState(1);\r\n  const [RackId, setRackId] = useState(1);\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const [searchitemHolder, setsearchitemHolder] = React.useState([]);\r\n  const [searchitemText, setsearchitemText] = React.useState(\"\");\r\n\r\n  const [formData, setFormData] = React.useState({\r\n    store: 1,\r\n    field2: \"\",\r\n    field3: \"\",\r\n    field4: \"\",\r\n    field5: \"\",\r\n    field6: \"\",\r\n    selectField: \"\",\r\n  });\r\n\r\n  const header = [\r\n    \"#\",\r\n    \"Code\",\r\n    \"Item Detail\",\r\n    \"Balance\",\r\n    // \"Status\",\r\n    \"Category\",\r\n    \"Reorder Level\",\r\n    // \"Created By\",\r\n  ];\r\n\r\n  const getStoreSKUResult = ReportsApi.useGetRackBalanceQuery({\r\n    RackId: formData.store,\r\n    // Location,\r\n  });\r\n  const storeSKU = getStoreSKUResult.data;\r\n\r\n  const getStoreResult = RackApi.useGetRackQuery({\r\n    //   ProjectType,\r\n    //   Location,\r\n  });\r\n  const productStore = getStoreResult?.data;\r\n\r\n  //   const globalBin = getGlobalBinResult?.data;\r\n\r\n  function filterListByArray(text) {\r\n    // return originalList.filter(item =>\r\n    setsearchitemText(text);\r\n    console.log(text);\r\n    let pp = storeSKU?.filter(\r\n      (array) =>\r\n        array?.name?.toLowerCase()?.includes(text?.toLowerCase()) ||\r\n        array?.code?.toLowerCase()?.includes(text?.toLowerCase())\r\n    );\r\n\r\n    console.log(pp);\r\n\r\n    setsearchitemHolder(pp);\r\n    // );\r\n  }\r\n\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(10);\r\n\r\n  // ... (other code remains unchanged)\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setRackId(value);\r\n    setFormData({\r\n      ...formData,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    // Handle form submission with formData\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Typography className=\"text-center font-bold my-5\" variant=\"h3\">\r\n        Stock Balance By Rack\r\n      </Typography>\r\n      <div className=\"flex flex-col gap-6 items-start\">\r\n        <Card\r\n          title=\"\"\r\n          className=\"px-8 py-4 w-full bg-black rounded-2xl flex flex-col gap-6 items-start\"\r\n        >\r\n          <div className=\"flex justify-between gap-8  w-full\">\r\n            <div className=\"w-full\">\r\n              <Typography className=\"text-white mb-2 ml-3 w-full\">\r\n                Select Rack\r\n              </Typography>\r\n              <FormControl className=\"w-full\" fullWidth>\r\n                {/* <InputLabel>Select Field</InputLabel> */}\r\n                <Select\r\n                  className=\"bg-white w-full\"\r\n                  name=\"store\"\r\n                  value={formData.store}\r\n                  onChange={handleChange}\r\n                >\r\n                  {productStore?.map((e) => (\r\n                    <MenuItem value={e?.id}>{e?.name}</MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"flex justify-between w-full\">\r\n            <div className=\"flex items-center\">\r\n              {/* <Button>Csv</Button> */}\r\n              {/* <Button>Excel</Button> */}\r\n              <ExportToExcel data={storeSKU} header={header} />\r\n              <Button className=\"ml-4\">PDF</Button>\r\n            </div>\r\n            <TextField\r\n              placeholder=\"Search table\"\r\n              className=\"\"\r\n              onChange={(e) => filterListByArray(e.target.value)}\r\n            />\r\n          </div>\r\n          <TableContainer component={Paper}>\r\n            <Table>\r\n              <TableHead>\r\n                <TableRow className=\"font-bold\">\r\n                  <TableCell className=\"font-bold text-base\">#</TableCell>\r\n                  <TableCell className=\"font-bold text-base\">Code</TableCell>\r\n                  <TableCell className=\"font-bold text-base\">\r\n                    Item Detail\r\n                  </TableCell>\r\n\r\n                  <TableCell className=\"font-bold text-base\">Balance</TableCell>\r\n                  <TableCell className=\"font-bold text-base\">\r\n                    Category\r\n                  </TableCell>\r\n\r\n                  <TableCell className=\"font-bold text-base\">\r\n                    Reorder Level\r\n                  </TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {(searchitemText.length > 0 ? searchitemHolder : storeSKU)\r\n                  ?.slice(page * rowsPerPage, (page + 1) * rowsPerPage)\r\n                  ?.map((row, idx) => (\r\n                    // )?.map((row, idx) => (\r\n                    <TableRow key={row.id}>\r\n                      <TableCell>{idx + 1}</TableCell>\r\n                      <TableCell>{row.code}</TableCell>\r\n                      <TableCell>{row.name}</TableCell>\r\n                      <TableCell>{row.balance}</TableCell>\r\n                      <TableCell>{row.category}</TableCell>\r\n\r\n                      <TableCell>{row.reOrderLevel}</TableCell>\r\n                      {/* <TableCell>{row.column6}</TableCell> */}\r\n                    </TableRow>\r\n                  ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n\r\n          <div class=\"bg-white w-full\">\r\n            <TablePagination\r\n              rowsPerPageOptions={[10, 25, 50, 100]}\r\n              component=\"div\"\r\n              count={\r\n                (searchitemText.length > 0 ? searchitemHolder : storeSKU)\r\n                  ?.length\r\n              }\r\n              rowsPerPage={rowsPerPage}\r\n              page={page}\r\n              onPageChange={handleChangePage}\r\n              onRowsPerPageChange={handleChangeRowsPerPage}\r\n            />\r\n          </div>\r\n\r\n          {/* <div className=\"flex items-center mt-12 self-end\">\r\n            <Button>First</Button>\r\n            <Button>Prev</Button>\r\n            <Button>Next</Button>\r\n            <Button>Last</Button>\r\n          </div> */}\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StockBalanceRack;\r\n"],"names":["BASE_URL","SoftwrkApi","endpoints","builder","productRack","mutation","query","config","url","concat","method","createRacks","getRack","arg","reloadItems","getRackShelves","getShelvesByRackId","id","getShelves","userType","getProductsByRack","RackId","getStats","getSkuStocks","productId","getStocksByLocation","locationId","getProductBalances","getAllProductsBalance","getAuditLogs","pageNo","console","log","params","getTransactionLogs","From","To","filter","getRackBalance","getReceivingLog","getReleaseLog","getMeasuringUnits","_ref","data","header","dataSource","useEffect","columns","map","e","title","toUpperCase","dataIndex","toLowerCase","key","_jsx","children","Button","type","onClick","exportToExcel","ws","XLSX","column","t","v","s","font","bold","record","wb","StockBalanceRack","_ref$slice","_ref2","setRackId","useState","enqueueSnackbar","useSnackbar","searchitemHolder","setsearchitemHolder","React","searchitemText","setsearchitemText","formData","setFormData","store","field2","field3","field4","field5","field6","selectField","storeSKU","ReportsApi","getStoreResult","RackApi","productStore","page","setPage","rowsPerPage","setRowsPerPage","_jsxs","Typography","className","variant","Card","FormControl","fullWidth","Select","name","value","onChange","event","target","MenuItem","class","ExportToExcel","TextField","placeholder","text","pp","array","_array$name","_array$name$toLowerCa","_array$code","_array$code$toLowerCa","includes","code","filterListByArray","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","TableBody","length","slice","row","idx","balance","category","reOrderLevel","TablePagination","rowsPerPageOptions","count","onPageChange","handleChangePage","newPage","onRowsPerPageChange","parseInt"],"sourceRoot":""}