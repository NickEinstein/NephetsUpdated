{"version":3,"file":"static/js/208.5db6f9b1.chunk.js","mappings":"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","sources":["apis/CategoryApi.js","apis/RackApi.js","apis/ReportsApi.js","apis/StoreApi.js","features/itemCreation/Product-Rack.js","../node_modules/@mui/material/esm/Card/cardClasses.js","../node_modules/@mui/material/esm/Card/Card.js"],"sourcesContent":["import { SoftwrkApi } from \"configs/StoreQueryConfig\";\r\n\r\nconst BASE_URL = '/category'\r\n\r\nexport const CategoryApi = SoftwrkApi.injectEndpoints({\r\n  endpoints: (builder) => ({\r\n    // receiveStock: builder.mutation({\r\n    //   query: (config) => ({\r\n    //     url: `${BASE_URL}/Receive-Stock`,\r\n    //     method: \"POST\",\r\n    //     ...config,\r\n    //   }),\r\n    // }),\r\n    // receiveStock: builder.mutation({\r\n    //   query: (config) => ({\r\n    //     url: `${BASE_URL}/receive-stock`,\r\n    //     method: \"POST\",\r\n    //     ...config,\r\n    //   }),\r\n    // }),\r\n    // receiveStomaterialReturnck: builder.mutation({\r\n    //   query: (config) => ({\r\n    //     url: `${BASE_URL}/Material-Return`,\r\n    //     method: \"POST\",\r\n    //     ...config,\r\n    //   }),\r\n    // }),\r\n\r\n    getCategory: builder.query({\r\n      query: (arg) => {\r\n        const { userType } = arg;\r\n        return {\r\n          url: `${BASE_URL}`,\r\n          method: \"GET\",\r\n          // params: { userType },\r\n        };\r\n      },\r\n    }),\r\n\r\n    \r\n\r\n    getStats: builder.query({\r\n      query: (arg) => {\r\n        // const { userType } = arg;\r\n        return {\r\n          url: `${BASE_URL}/super-admin/userStatsChart`,\r\n          method: \"GET\",\r\n          // params: { userType },\r\n        };\r\n      },\r\n    }),\r\n  }),\r\n});\r\n\r\n// ;\r\n\r\nexport default CategoryApi;\r\n","import { SoftwrkApi } from \"configs/StoreQueryConfig\";\r\n\r\nconst BASE_URL = \"/rack\";\r\n\r\nexport const UserApi = SoftwrkApi.injectEndpoints({\r\n  endpoints: (builder) => ({\r\n    // receiveStock: builder.mutation({\r\n    //   query: (config) => ({\r\n    //     url: `${BASE_URL}/Receive-Stock`,\r\n    //     method: \"POST\",\r\n    //     ...config,\r\n    //   }),\r\n    // }),\r\n    productRack: builder.mutation({\r\n      query: (config) => ({\r\n        url: `${BASE_URL}/Product-Rack`,\r\n        method: \"PUT\",\r\n        ...config,\r\n      }),\r\n    }),\r\n    createRacks: builder.mutation({\r\n      query: (config) => ({\r\n        url: `${BASE_URL}/`,\r\n        method: \"POST\",\r\n        ...config,\r\n      }),\r\n    }),\r\n\r\n    getRack: builder.query({\r\n      query: (arg) => {\r\n        const { reloadItems } = arg;\r\n        return {\r\n          url: `${BASE_URL}`,\r\n          method: \"GET\",\r\n          // params: { reloadItems },\r\n        };\r\n      },\r\n    }),\r\n\r\n    getRackShelves: builder.query({\r\n      query: (arg) => {\r\n        const { reloadItems } = arg;\r\n        return {\r\n          url: `${BASE_URL}/shelves`,\r\n          method: \"GET\",\r\n          // params: { reloadItems },\r\n        };\r\n      },\r\n    }),\r\n\r\n    getShelvesByRackId: builder.query({\r\n      query: (arg) => {\r\n        const { id } = arg;\r\n        return {\r\n          url: `${BASE_URL}/${id}`,\r\n          method: \"GET\",\r\n          // params: { userType },\r\n        };\r\n      },\r\n    }),\r\n\r\n    getShelves: builder.query({\r\n      query: (arg) => {\r\n        const { userType } = arg;\r\n        return {\r\n          url: `${BASE_URL}/shelves`,\r\n          method: \"GET\",\r\n          // params: { userType },\r\n        };\r\n      },\r\n    }),\r\n    getProductsByRack: builder.query({\r\n      query: (arg) => {\r\n        const { RackId } = arg;\r\n        return {\r\n          url: `${BASE_URL}/Rack-Products/${RackId}`,\r\n          method: \"GET\",\r\n          // params: { RackId },\r\n        };\r\n      },\r\n    }),\r\n\r\n    // getStoreStock: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { userType } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/products`,\r\n    //       method: \"GET\",\r\n    //       // params: { userType },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    // getStoreTaggingDetail: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { deliveryItemId, unit } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/get-taggingDetail`,\r\n    //       method: \"GET\",\r\n    //       params: {  deliveryItemId, unit },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    // getTempStocks: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { userType } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/Get-TmpStocks`,\r\n    //       method: \"GET\",\r\n    //       // params: { userType },\r\n    //     };\r\n    //   },\r\n    // }),\r\n    // getItemDetail: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { itemId } = arg;\r\n    //     // console.log(pageNo);\r\n    //     return {\r\n    //       url: `${BASE_URL}/Get-ItemDetails/${itemId}/`,\r\n    //       method: \"GET\",\r\n    //       // params: { pageNo },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    // getStoreStocks: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { userType, pageNo } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/Get-Store-Stocks`,\r\n    //       method: \"GET\",\r\n    //       params: { userType, pageNo },\r\n    //     };\r\n    //   },\r\n    // }),\r\n    // getGlobalBin: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { ProjectType, Location} = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/Get-Global-Bincard`,\r\n    //       method: \"GET\",\r\n    //       // param nas: {  ProjectType, Location },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    // getBinCard: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { ProjectType, Location} = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/Get-BinCard`,\r\n    //       method: \"GET\",\r\n    //       params: {  ProjectType, Location },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    // getAllCompanyRiders: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { userType } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/company/getalluser`,\r\n    //       method: \"GET\",\r\n    //       params: { userType },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    // getAllCompanyCustomers: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { userType } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/company/getalluser`,\r\n    //       method: \"GET\",\r\n    //       params: { userType },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    // getAllTrips: builder.query({\r\n    //   query: (arg) => {\r\n    //     // const { userType } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/super-admin/getAllTripRequest`,\r\n    //       method: \"GET\",\r\n    //       // params: { userType },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    // getAllRidersForCompany: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { userId } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/super-admin/getallriderscompany`,\r\n    //       method: \"GET\",\r\n    //       params: { userId },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    getStats: builder.query({\r\n      query: (arg) => {\r\n        // const { userType } = arg;\r\n        return {\r\n          url: `${BASE_URL}/super-admin/userStatsChart`,\r\n          method: \"GET\",\r\n          // params: { userType },\r\n        };\r\n      },\r\n    }),\r\n  }),\r\n});\r\n\r\n// ;\r\n\r\nexport default UserApi;\r\n","import { SoftwrkApi } from \"configs/StoreQueryConfig\";\r\n\r\nconst BASE_URL = \"/Reports\";\r\n\r\nexport const ReportsApi = SoftwrkApi.injectEndpoints({\r\n  endpoints: (builder) => ({\r\n    // signup: builder.mutation({\r\n    //   query: (config) => ({\r\n    //     url: `${BASE_URL}/signup`,\r\n    //     method: \"POST\",\r\n    //     ...config,\r\n    //   }),\r\n    // }),\r\n    // stockDelivery: builder.mutation({\r\n    //   query: (config) => ({\r\n    //     url: `${BASE_URL}/add-delivery-Item`,\r\n    //     method: \"POST\",\r\n    //     ...config,\r\n    //   }),\r\n    // }),\r\n\r\n    getSkuStocks: builder.query({\r\n      query: (arg) => {\r\n        const { productId } = arg;\r\n        return {\r\n          url: `${BASE_URL}/Get-Stocks-SKU/${productId}`,\r\n          method: \"GET\",\r\n          //   params: { productId },\r\n        };\r\n      },\r\n    }),\r\n    getStocksByLocation: builder.query({\r\n      query: (arg) => {\r\n        const { locationId } = arg;\r\n        return {\r\n          url: `${BASE_URL}/Get-Stocks-Location/${locationId}`,\r\n          method: \"GET\",\r\n          //   params: { productId },\r\n        };\r\n      },\r\n    }),\r\n\r\n    getProductBalances: builder.query({\r\n      // Get-Products-Balances\r\n      query: (arg) => {\r\n        const { userType } = arg;\r\n        return {\r\n          url: `${BASE_URL}/Get-Products-Store-Balances`,\r\n          method: \"GET\",\r\n          // params: { userType },\r\n        };\r\n      },\r\n    }),\r\n\r\n\r\n    getAllProductsBalance: builder.query({\r\n      query: (arg) => {\r\n        const { userType } = arg;\r\n        return {\r\n          url: `${BASE_URL}/Get-Products-Balances`,\r\n          method: \"GET\",\r\n          // params: { userType },\r\n        };\r\n      },\r\n    }),\r\n    getAuditLogs: builder.query({\r\n      query: (arg) => {\r\n        const { pageNo } = arg;\r\n        console.log(pageNo);\r\n        return {\r\n          url: `${BASE_URL}/Get-AuditLogs`,\r\n          method: \"GET\",\r\n          params: { pageNo },\r\n        };\r\n      },\r\n    }),\r\n\r\n    getTransactionLogs: builder.query({\r\n      query: (arg) => {\r\n        const { From, To, filter } = arg;\r\n        // console.log(pageNo);\r\n        return {\r\n          url: `${BASE_URL}/Get-TransactionLogs`,\r\n          method: \"GET\",\r\n          params: { From, To, filter  },\r\n        };\r\n      },\r\n    }),\r\n    getRackBalance: builder.query({\r\n      query: (arg) => {\r\n        const { RackId } = arg;\r\n        return {\r\n          url: `${BASE_URL}/Get-Rack-Balance/${RackId}`,\r\n          method: \"GET\",\r\n          // params: { RackId },\r\n        };\r\n      },\r\n    }),\r\n\r\n    getReceivingLog: builder.query({\r\n      query: (arg) => {\r\n        const { userType } = arg;\r\n        return {\r\n          url: `${BASE_URL}/Receiving-Log`,\r\n          method: \"GET\",\r\n          params: { userType },\r\n        };\r\n      },\r\n    }),\r\n\r\n    getReleaseLog: builder.query({\r\n      query: (arg) => {\r\n        const { userType } = arg;\r\n        return {\r\n          url: `${BASE_URL}/Receiving-Log`,\r\n          method: \"GET\",\r\n          params: { userType },\r\n        };\r\n      },\r\n    }),\r\n    getMeasuringUnits: builder.query({\r\n      query: (arg) => {\r\n        // const { userType } = arg;\r\n        return {\r\n          url: `${BASE_URL}/Get-MeasureUnits`,\r\n          method: \"GET\",\r\n          // params: { userType },\r\n        };\r\n      },\r\n    }),\r\n\r\n   \r\n    // getAllCompanyCustomers: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { userType } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/company/getalluser`,\r\n    //       method: \"GET\",\r\n    //       params: { userType },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    // getAllTrips: builder.query({\r\n    //   query: (arg) => {\r\n    //     // const { userType } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/super-admin/getAllTripRequest`,\r\n    //       method: \"GET\",\r\n    //       // params: { userType },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    // getAllRidersForCompany: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { userId } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/super-admin/getallriderscompany`,\r\n    //       method: \"GET\",\r\n    //       params: { userId },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    getStats: builder.query({\r\n      query: (arg) => {\r\n        // const { userType } = arg;\r\n        return {\r\n          url: `${BASE_URL}/super-admin/userStatsChart`,\r\n          method: \"GET\",\r\n          // params: { userType },\r\n        };\r\n      },\r\n    }),\r\n  }),\r\n});\r\n\r\n// ;\r\n\r\nexport default ReportsApi;\r\n","import { SoftwrkApi } from \"configs/StoreQueryConfig\";\r\n\r\nconst BASE_URL = '/store'\r\n\r\nexport const StoreApi = SoftwrkApi.injectEndpoints({\r\n  endpoints: (builder) => ({\r\n    // receiveStock: builder.mutation({\r\n    //   query: (config) => ({\r\n    //     url: `${BASE_URL}/Receive-Stock`,\r\n    //     method: \"POST\",\r\n    //     ...config,\r\n    //   }),\r\n    // }),\r\n    // receiveStock: builder.mutation({\r\n    //   query: (config) => ({\r\n    //     url: `${BASE_URL}/receive-stock`,\r\n    //     method: \"POST\",\r\n    //     ...config,\r\n    //   }),\r\n    // }),\r\n    // receiveStomaterialReturnck: builder.mutation({\r\n    //   query: (config) => ({\r\n    //     url: `${BASE_URL}/Material-Return`,\r\n    //     method: \"POST\",\r\n    //     ...config,\r\n    //   }),\r\n    // }),\r\n\r\n    getStores: builder.query({\r\n      query: (arg) => {\r\n        const { userType } = arg;\r\n        return {\r\n          url: `${BASE_URL}`,\r\n          method: \"GET\",\r\n          // params: { userType },\r\n        };\r\n      },\r\n    }),\r\n\r\n    getShelvesByRackId: builder.query({\r\n      query: (arg) => {\r\n        const { id } = arg;\r\n        return {\r\n          url: `${BASE_URL}/${id}`,\r\n          method: \"GET\",\r\n          // params: { userType },\r\n        };\r\n      },\r\n    }),\r\n\r\n    getShelves: builder.query({\r\n      query: (arg) => {\r\n        const { userType } = arg;\r\n        return {\r\n          url: `${BASE_URL}/shelves`,\r\n          method: \"GET\",\r\n          // params: { userType },\r\n        };\r\n      },\r\n    }),\r\n    // getStoreLocations: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { userType } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/Get-Locations`,\r\n    //       method: \"GET\",\r\n    //       // params: { userType },\r\n    //     };\r\n    //   },\r\n    // }),\r\n    \r\n\r\n    // getStoreStock: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { userType } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/products`,\r\n    //       method: \"GET\",\r\n    //       // params: { userType },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    // getStoreTaggingDetail: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { deliveryItemId, unit } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/get-taggingDetail`,\r\n    //       method: \"GET\",\r\n    //       params: {  deliveryItemId, unit },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n\r\n    \r\n\r\n    // getTempStocks: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { userType } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/Get-TmpStocks`,\r\n    //       method: \"GET\",\r\n    //       // params: { userType },\r\n    //     };\r\n    //   },\r\n    // }),\r\n    // getItemDetail: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { itemId } = arg;\r\n    //     // console.log(pageNo);\r\n    //     return {\r\n    //       url: `${BASE_URL}/Get-ItemDetails/${itemId}/`,\r\n    //       method: \"GET\",\r\n    //       // params: { pageNo },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    // getStoreStocks: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { userType, pageNo } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/Get-Store-Stocks`,\r\n    //       method: \"GET\",\r\n    //       params: { userType, pageNo },\r\n    //     };\r\n    //   },\r\n    // }),\r\n    // getGlobalBin: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { ProjectType, Location} = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/Get-Global-Bincard`,\r\n    //       method: \"GET\",\r\n    //       // param nas: {  ProjectType, Location },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    // getBinCard: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { ProjectType, Location} = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/Get-BinCard`,\r\n    //       method: \"GET\",\r\n    //       params: {  ProjectType, Location },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    // getAllCompanyRiders: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { userType } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/company/getalluser`,\r\n    //       method: \"GET\",\r\n    //       params: { userType },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    // getAllCompanyCustomers: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { userType } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/company/getalluser`,\r\n    //       method: \"GET\",\r\n    //       params: { userType },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    // getAllTrips: builder.query({\r\n    //   query: (arg) => {\r\n    //     // const { userType } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/super-admin/getAllTripRequest`,\r\n    //       method: \"GET\",\r\n    //       // params: { userType },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    // getAllRidersForCompany: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { userId } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/super-admin/getallriderscompany`,\r\n    //       method: \"GET\",\r\n    //       params: { userId },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    getStats: builder.query({\r\n      query: (arg) => {\r\n        // const { userType } = arg;\r\n        return {\r\n          url: `${BASE_URL}/super-admin/userStatsChart`,\r\n          method: \"GET\",\r\n          // params: { userType },\r\n        };\r\n      },\r\n    }),\r\n  }),\r\n});\r\n\r\n// ;\r\n\r\nexport default StoreApi;\r\n","import React from \"react\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Select from \"@mui/material/Select\";\r\nimport MenuItem from \"@mui/material/MenuItem\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport InputLabel from \"@mui/material/InputLabel\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Table from \"@mui/material/Table\";\r\nimport TableBody from \"@mui/material/TableBody\";\r\nimport TableCell from \"@mui/material/TableCell\";\r\nimport TableContainer from \"@mui/material/TableContainer\";\r\nimport TableHead from \"@mui/material/TableHead\";\r\nimport TableRow from \"@mui/material/TableRow\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport { Autocomplete, Card, Typography } from \"@mui/material\";\r\nimport CategoryApi from \"apis/CategoryApi\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport { UserApi } from \"apis/UserApi\";\r\nimport ReportsApi from \"apis/ReportsApi\";\r\nimport RackApi from \"apis/RackApi\";\r\nimport StoreApi from \"apis/StoreApi\";\r\n\r\nconst UserCreation = () => {\r\n  const { enqueueSnackbar } = useSnackbar();\r\n\r\n  const [result, setResult] = React.useState(null);\r\n  const [RackId, setRackId] = React.useState();\r\n  const [isLoading, setIsLoading] = React.useState(false);\r\n\r\n  const getCategories = CategoryApi.useGetCategoryQuery({\r\n    // id: formData.rack,\r\n  });\r\n  const categories = getCategories?.data;\r\n\r\n  const getStoreProductsResult = ReportsApi.useGetAllProductsBalanceQuery({\r\n    // RackId: formData.store,\r\n    // Location,\r\n  });\r\n  //   const storeProducts = getStoreProductsResult?.data?.reverse()\r\n  const storeProducts = getStoreProductsResult?.data\r\n    ? [...getStoreProductsResult.data]?.reverse()\r\n    : [];\r\n\r\n  const getRacksResult = RackApi.useGetRackQuery({\r\n    // RackId: formData.store,\r\n    // Location,\r\n  });\r\n  //   const storeProducts = getStoreProductsResult?.data?.reverse()\r\n  const racks = getRacksResult?.data;\r\n\r\n  const getProductsInRacksResult = RackApi.useGetProductsByRackQuery({\r\n    RackId,\r\n    // RackId: formData.store,\r\n    // Location,\r\n  });\r\n  const getStoreQueryResult = StoreApi.useGetStoresQuery({});\r\n  const stores = getStoreQueryResult?.data || [];\r\n  //   const storeProducts = getStoreProductsResult?.data?.reverse()\r\n  const productsInRack = getProductsInRacksResult?.data;\r\n\r\n  const [formData, setFormData] = React.useState({ rackId: \"\" });\r\n\r\n  const [createRackMuation, createRackMutationResult] =\r\n    RackApi.useProductRackMutation();\r\n\r\n  const handleChange = (event, newValue) => {\r\n    console.log(newValue);\r\n    const { name, value } = event.target;\r\n    setFormData({\r\n      ...formData,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  const handleChangez = (event, newValue) => {\r\n    console.log(newValue);\r\n    setResult(newValue);\r\n    // const { name, value } = event.target;\r\n    // setFormData({\r\n    //   ...formData,\r\n    //   [name]: value,\r\n    // });\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    postOutbound();\r\n    e.preventDefault();\r\n    // Handle form submission with formData\r\n  };\r\n\r\n  const postOutbound = async () => {\r\n    setIsLoading(true);\r\n    let payload = {\r\n      productId: result.id,\r\n      rackId: formData?.rackId,\r\n    };\r\n    console.log(payload);\r\n    try {\r\n      setIsLoading(false);\r\n\r\n      const data = await createRackMuation({ data: payload }).unwrap();\r\n      enqueueSnackbar(\"Product successfully Linked to Rack\", {\r\n        variant: \"success\",\r\n      });\r\n      setResult(null);\r\n    } catch (error) {\r\n      console.log(error);\r\n      setFormData();\r\n      enqueueSnackbar(error?.data, \"\", {\r\n        variant: \"error\",\r\n      });\r\n      setIsLoading(false);\r\n\r\n      setResult(null);\r\n      setFormData();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Typography className=\"text-center font-bold my-5\" variant=\"h4\">\r\n        Products in Rack\r\n      </Typography>\r\n      <div className=\" gap-6\">\r\n        <Card className=\"px-8 py-4 w-full bg-black text-white rounded-2xl\">\r\n          <form className=\"flex flex-col gap-4  px-10\" onSubmit={handleSubmit}>\r\n            <div className=\"w-full mb-6 flex flex-col gap-4\">\r\n              <div className=\"w-full mt-6\">\r\n                <Typography\r\n                  className=\"text-center font-bold text-white my-5\"\r\n                  variant=\"h5\"\r\n                >\r\n                  Add Products to Rack\r\n                </Typography>\r\n                <div class=\"flex gap-6 items-center\">\r\n                  <div className=\"w-full\">\r\n                    <Typography>Product</Typography>\r\n                    <Autocomplete\r\n                      value={result}\r\n                      className=\" m-2\"\r\n                      disablePortal\r\n                      onChange={(event, newValue) =>\r\n                        // handleChangez(event, newValue)\r\n                        setResult(newValue)\r\n                      }\r\n                      // id=\"combo-box-demo\"\r\n                      options={storeProducts?.map((e) => ({\r\n                        label: e?.name,\r\n                        id: e?.id,\r\n                      }))}\r\n                      sx={{ width: 300 }}\r\n                      renderInput={(params) => <TextField {...params} />}\r\n                    />\r\n                    {/* <FormControl className=\"w-full\" fullWidth>\r\n                      <Select\r\n                        className=\"bg-white w-full\"\r\n                        name=\"productId\"\r\n                        value={formData.productId}\r\n                        onChange={handleChange}\r\n                      >\r\n                        {storeProducts?.map((e) => (\r\n                          <MenuItem value={e?.id}>{e?.name}</MenuItem>\r\n                        ))}\r\n                      </Select>\r\n                    </FormControl> */}\r\n                  </div>\r\n\r\n                  <div className=\"w-full\">\r\n                    <div className=\"flex gap-4\">\r\n                      <div className=\"w-full\">\r\n                        <Typography className=\"text-white mb-2 ml-3 w-full\">\r\n                          Select Store\r\n                        </Typography>\r\n                        <FormControl className=\"w-full\" fullWidth>\r\n                          {/* <InputLabel>Select Field</InputLabel> */}\r\n                          <Select\r\n                            className=\"bg-white w-full\"\r\n                            name=\"storeId\"\r\n                            value={formData.storeId}\r\n                            onChange={handleChange}\r\n                          >\r\n                            {stores?.map((e) => (\r\n                              <MenuItem value={e?.id}>{e?.name}</MenuItem>\r\n                            ))}\r\n                          </Select>\r\n                        </FormControl>\r\n                      </div>\r\n\r\n                      <div className=\"\">\r\n                        <Typography className=\"text-white mb-2 ml-3\">\r\n                          Select Rack\r\n                        </Typography>\r\n\r\n                        <FormControl fullWidth>\r\n                          {/* <InputLabel>Select Field</InputLabel> */}\r\n                          <Autocomplete\r\n                            className=\"m-2\"\r\n                            disablePortal\r\n                            onChange={\r\n                              (event, newValue) =>\r\n                                // handleChange(event, newValue)\r\n                                setFormData({ ...formData, rack: newValue?.id })\r\n                              // console.log(newValue)\r\n                            }\r\n                            // id=\"combo-box-demo\"\r\n                            options={racks\r\n                              ?.filter((e) => e?.storeId == formData.storeId)\r\n                              ?.map((e) => ({\r\n                                label: e?.name,\r\n                                id: e?.id,\r\n                              }))}\r\n                            sx={{ minWidth: 200 }}\r\n                            renderInput={(params) => <TextField {...params} />}\r\n                          />\r\n                        </FormControl>\r\n                      </div>\r\n                    </div>\r\n                    {/* <Typography>Racks</Typography>\r\n                    <FormControl className=\"w-full m-2\" fullWidth>\r\n                      <Select\r\n                        className=\"w-full\"\r\n                        name=\"rackId\"\r\n                        value={formData?.rackId}\r\n                        onChange={handleChange}\r\n                      >\r\n                        {racks?.map((e) => (\r\n                          <MenuItem value={e?.id}>{e?.name}</MenuItem>\r\n                        ))}\r\n                      </Select>\r\n                    </FormControl> */}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"flex gap-3 w-full justify-start mt-5\">\r\n              <Button\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n                // color=\"primary\"\r\n                className=\"p-3 w-full bg-[#2BDF27] flex justify-center gap-9 items-center text-base mb-6\"\r\n                // onClick={startDelivery}\r\n                // onClick={() => localStorage.setItem('type', 'CLIENT')}\r\n                // className=' '\r\n                disabled={isLoading}\r\n              >\r\n                {isLoading && (\r\n                  <div class=\"flex items-center justify-center\">\r\n                    <div class=\"border-t-4 border-white border-solid rounded-full animate-spin h-4 w-4\"></div>\r\n                  </div>\r\n                )}\r\n                Link Product to Rack\r\n              </Button>\r\n            </div>\r\n          </form>\r\n\r\n          {/* <div className=\"flex items-center mt-6 mb-3\">\r\n            \r\n          \r\n            <Button>Excel</Button>\r\n            <Button classname='ml-4'>PDF</Button>\r\n            \r\n           \r\n          </div> */}\r\n\r\n          <Typography\r\n            className=\"text-center font-bold text-white my-5\"\r\n            variant=\"h4\"\r\n          >\r\n            View Products in Rack\r\n          </Typography>\r\n\r\n          <div className=\"w-full\">\r\n            <Typography className=\"mx-5 font-bold\">Racks</Typography>\r\n            <FormControl className=\"w-full m-2\" fullWidth>\r\n              {/* <InputLabel>Select Field</InputLabel> */}\r\n              <Select\r\n                className=\"w-1/3\"\r\n                name=\"rackId\"\r\n                value={RackId}\r\n                onChange={(e) => setRackId(e.target.value)}\r\n              >\r\n                {racks?.map((e) => (\r\n                  <MenuItem value={e?.id}>{e?.name}</MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n          </div>\r\n\r\n          <TableContainer component={Paper}>\r\n            <Table>\r\n              <TableHead>\r\n                <TableRow className=\"font-bold\">\r\n                  <TableCell className=\"font-bold text-base\">#</TableCell>\r\n                  <TableCell className=\"font-bold text-base\">Product</TableCell>\r\n                  <TableCell className=\"font-bold text-base\">Rack</TableCell>\r\n                  {/* <TableCell className=\"font-bold text-base\">Code</TableCell>\r\n\r\n                  <TableCell className=\"font-bold text-base\">Balance</TableCell>\r\n                  <TableCell className=\"font-bold text-base\">\r\n                    Reorder-level\r\n                  </TableCell> */}\r\n\r\n                  {/* <TableCell className=\"font-bold text-base\">\r\n                    Reorder Level\r\n                  </TableCell> */}\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {productsInRack?.map((row, idx) => (\r\n                  <TableRow key={row.id}>\r\n                    <TableCell>{idx + 1}</TableCell>\r\n                    <TableCell>{row.product}</TableCell>\r\n                    <TableCell>{row.rack}</TableCell>\r\n                    {/* <TableCell>{row.code}</TableCell>\r\n                    <TableCell>{row.balance}</TableCell>\r\n                    <TableCell>{row.reOrderLevel}</TableCell> */}\r\n\r\n                    {/* <TableCell>{row.reOrderLevel}</TableCell> */}\r\n                    {/* <TableCell>{row.column6}</TableCell> */}\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserCreation;\r\n","import { generateUtilityClass, generateUtilityClasses } from '@mui/base';\nexport function getCardUtilityClass(slot) {\n  return generateUtilityClass('MuiCard', slot);\n}\nconst cardClasses = generateUtilityClasses('MuiCard', ['root']);\nexport default cardClasses;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"raised\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { chainPropTypes } from '@mui/utils';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport Paper from '../Paper';\nimport { getCardUtilityClass } from './cardClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getCardUtilityClass, classes);\n};\n\nconst CardRoot = styled(Paper, {\n  name: 'MuiCard',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})(() => {\n  return {\n    overflow: 'hidden'\n  };\n});\nconst Card = /*#__PURE__*/React.forwardRef(function Card(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiCard'\n  });\n\n  const {\n    className,\n    raised = false\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const ownerState = _extends({}, props, {\n    raised\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(CardRoot, _extends({\n    className: clsx(classes.root, className),\n    elevation: raised ? 8 : undefined,\n    ref: ref,\n    ownerState: ownerState\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Card.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, the card will use raised styling.\n   * @default false\n   */\n  raised: chainPropTypes(PropTypes.bool, props => {\n    if (props.raised && props.variant === 'outlined') {\n      return new Error('MUI: Combining `raised={true}` with `variant=\"outlined\"` has no effect.');\n    }\n\n    return null;\n  }),\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Card;"],"names":["BASE_URL","SoftwrkApi","endpoints","builder","getCategory","query","arg","userType","url","concat","method","getStats","productRack","mutation","config","createRacks","getRack","reloadItems","getRackShelves","getShelvesByRackId","id","getShelves","getProductsByRack","RackId","getSkuStocks","productId","getStocksByLocation","locationId","getProductBalances","getAllProductsBalance","getAuditLogs","pageNo","console","log","params","getTransactionLogs","From","To","filter","getRackBalance","getReceivingLog","getReleaseLog","getMeasuringUnits","getStores","UserCreation","_ref","_racks$filter","enqueueSnackbar","useSnackbar","result","setResult","React","setRackId","isLoading","setIsLoading","getCategories","CategoryApi","getStoreProductsResult","data","ReportsApi","storeProducts","reverse","getRacksResult","RackApi","racks","getProductsInRacksResult","getStoreQueryResult","StoreApi","stores","productsInRack","formData","setFormData","rackId","createRackMuation","createRackMutationResult","postOutbound","async","payload","unwrap","variant","error","_jsxs","children","_jsx","Typography","className","Card","onSubmit","e","preventDefault","class","Autocomplete","value","disablePortal","onChange","event","newValue","options","map","label","name","sx","width","renderInput","TextField","FormControl","fullWidth","Select","storeId","handleChange","target","MenuItem","rack","minWidth","Button","type","disabled","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","TableBody","row","idx","product","getCardUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","CardRoot","styled","overridesResolver","props","styles","root","overflow","inProps","ref","useThemeProps","raised","other","_objectWithoutPropertiesLoose","ownerState","_extends","classes","composeClasses","useUtilityClasses","clsx","elevation","undefined"],"sourceRoot":""}