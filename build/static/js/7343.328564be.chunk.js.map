{"version":3,"file":"static/js/7343.328564be.chunk.js","mappings":"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","sources":["apis/ReportsApi.js","features/dashboard/ExportToExcel.js","features/stock/TransactionLog.js"],"sourcesContent":["import { SoftwrkApi } from \"configs/StoreQueryConfig\";\r\n\r\nconst BASE_URL = \"/Reports\";\r\n\r\nexport const ReportsApi = SoftwrkApi.injectEndpoints({\r\n  endpoints: (builder) => ({\r\n    // signup: builder.mutation({\r\n    //   query: (config) => ({\r\n    //     url: `${BASE_URL}/signup`,\r\n    //     method: \"POST\",\r\n    //     ...config,\r\n    //   }),\r\n    // }),\r\n    // stockDelivery: builder.mutation({\r\n    //   query: (config) => ({\r\n    //     url: `${BASE_URL}/add-delivery-Item`,\r\n    //     method: \"POST\",\r\n    //     ...config,\r\n    //   }),\r\n    // }),\r\n\r\n    getSkuStocks: builder.query({\r\n      query: (arg) => {\r\n        const { productId } = arg;\r\n        return {\r\n          url: `${BASE_URL}/Get-Stocks-SKU/${productId}`,\r\n          method: \"GET\",\r\n          //   params: { productId },\r\n        };\r\n      },\r\n    }),\r\n    getStocksByLocation: builder.query({\r\n      query: (arg) => {\r\n        const { locationId } = arg;\r\n        return {\r\n          url: `${BASE_URL}/Get-Stocks-Location/${locationId}`,\r\n          method: \"GET\",\r\n          //   params: { productId },\r\n        };\r\n      },\r\n    }),\r\n\r\n    getProductBalances: builder.query({\r\n      // Get-Products-Balances\r\n      query: (arg) => {\r\n        const { userType } = arg;\r\n        return {\r\n          url: `${BASE_URL}/Get-Products-Store-Balances`,\r\n          method: \"GET\",\r\n          // params: { userType },\r\n        };\r\n      },\r\n    }),\r\n\r\n\r\n    getAllProductsBalance: builder.query({\r\n      query: (arg) => {\r\n        const { userType } = arg;\r\n        return {\r\n          url: `${BASE_URL}/Get-Products-Balances`,\r\n          method: \"GET\",\r\n          // params: { userType },\r\n        };\r\n      },\r\n    }),\r\n    getAuditLogs: builder.query({\r\n      query: (arg) => {\r\n        const { pageNo } = arg;\r\n        console.log(pageNo);\r\n        return {\r\n          url: `${BASE_URL}/Get-AuditLogs`,\r\n          method: \"GET\",\r\n          params: { pageNo },\r\n        };\r\n      },\r\n    }),\r\n\r\n    getTransactionLogs: builder.query({\r\n      query: (arg) => {\r\n        const { From, To, filter } = arg;\r\n        // console.log(pageNo);\r\n        return {\r\n          url: `${BASE_URL}/Get-TransactionLogs`,\r\n          method: \"GET\",\r\n          params: { From, To, filter  },\r\n        };\r\n      },\r\n    }),\r\n    getRackBalance: builder.query({\r\n      query: (arg) => {\r\n        const { RackId } = arg;\r\n        return {\r\n          url: `${BASE_URL}/Get-Rack-Balance/${RackId}`,\r\n          method: \"GET\",\r\n          // params: { RackId },\r\n        };\r\n      },\r\n    }),\r\n\r\n    getReceivingLog: builder.query({\r\n      query: (arg) => {\r\n        const { userType } = arg;\r\n        return {\r\n          url: `${BASE_URL}/Receiving-Log`,\r\n          method: \"GET\",\r\n          params: { userType },\r\n        };\r\n      },\r\n    }),\r\n\r\n    getReleaseLog: builder.query({\r\n      query: (arg) => {\r\n        const { userType } = arg;\r\n        return {\r\n          url: `${BASE_URL}/Receiving-Log`,\r\n          method: \"GET\",\r\n          params: { userType },\r\n        };\r\n      },\r\n    }),\r\n    getMeasuringUnits: builder.query({\r\n      query: (arg) => {\r\n        // const { userType } = arg;\r\n        return {\r\n          url: `${BASE_URL}/Get-MeasureUnits`,\r\n          method: \"GET\",\r\n          // params: { userType },\r\n        };\r\n      },\r\n    }),\r\n\r\n   \r\n    // getAllCompanyCustomers: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { userType } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/company/getalluser`,\r\n    //       method: \"GET\",\r\n    //       params: { userType },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    // getAllTrips: builder.query({\r\n    //   query: (arg) => {\r\n    //     // const { userType } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/super-admin/getAllTripRequest`,\r\n    //       method: \"GET\",\r\n    //       // params: { userType },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    // getAllRidersForCompany: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { userId } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/super-admin/getallriderscompany`,\r\n    //       method: \"GET\",\r\n    //       params: { userId },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    getStats: builder.query({\r\n      query: (arg) => {\r\n        // const { userType } = arg;\r\n        return {\r\n          url: `${BASE_URL}/super-admin/userStatsChart`,\r\n          method: \"GET\",\r\n          // params: { userType },\r\n        };\r\n      },\r\n    }),\r\n  }),\r\n});\r\n\r\n// ;\r\n\r\nexport default ReportsApi;\r\n","// import React from \"react\";\r\n// import { CSVLink } from \"react-csv\";\r\n\r\n// const ExportToExcel = () => {\r\n//   const data = [\r\n//     // Bold headers row\r\n//     [\r\n//       { value: \"Name\", style: { bold: true } },\r\n//       { value: \"Age\", style: { bold: true } },\r\n//       { value: \"Country\", style: { bold: true } },\r\n//     ],\r\n//     // Data rows\r\n//     [\"John Doe\", 25, \"USA\"],\r\n//     [\"Jane Smith\", 30, \"Canada\"],\r\n//     // Add more rows as needed\r\n//   ];\r\n\r\n//   const excelTitle = \"My Excel Sheet\";\r\n\r\n//   return (\r\n//     <div>\r\n//       <h1>Export Data to Excel</h1>\r\n//       <table>\r\n//         <tbody>\r\n//           {data.map((row, index) => (\r\n//             <tr key={index}>\r\n//               {row.map((cell, cellIndex) => (\r\n//                 <td key={cellIndex} style={cell.style}>\r\n//                   {cell.value}\r\n//                 </td>\r\n//               ))}\r\n//             </tr>\r\n//           ))}\r\n//         </tbody>\r\n//       </table>\r\n\r\n//       <CSVLink data={data} filename={\"exported-data.csv\"} target=\"_blank\">\r\n//         {excelTitle}\r\n//       </CSVLink>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default ExportToExcel;\r\n\r\nimport { Button } from \"@mui/material\";\r\nimport React from \"react\";\r\nimport { useEffect } from \"react\";\r\n// import { Table, Button } from 'antd';\r\n// import { ExcelOutlined } from '@ant-design/icons';\r\nimport * as XLSX from \"xlsx\";\r\n\r\nconst ExportToExcel = ({ data, header }) => {\r\n  // Sample data for the Ant Design table\r\n  let dataSource = [];\r\n  // { key: \"1\", name: \"John Doe\", age: 25, country: \"USA\" },\r\n  // { key: \"2\", name: \"Jane Smith\", age: 30, country: \"Canada\" },\r\n  // Add more data as needed\r\n\r\n  //   console.log(data);\r\n\r\n  useEffect(() => {\r\n    // console.log(data);\r\n    dataSource = data;\r\n  }, [data]);\r\n\r\n  // Columns configuration for the Ant Design table\r\n  const columns = header.map((e) => ({\r\n    title: e?.toUpperCase(),\r\n    dataIndex: e.toLowerCase(),\r\n    key: e,\r\n  }));\r\n\r\n  // { title: \"Age\", dataIndex: \"age\", key: \"age\" },\r\n  // { title: \"Country\", dataIndex: \"country\", key: \"country\" },\r\n  // Add more columns as needed\r\n\r\n  const exportToExcel = () => {\r\n    // Create a worksheet with bold headers\r\n    const ws = XLSX.utils.aoa_to_sheet([\r\n      columns.map((column) => ({\r\n        t: \"s\",\r\n        v: column.title,\r\n        s: { font: { bold: true } },\r\n      })),\r\n      ...dataSource.map((record) =>\r\n        columns.map((column) => record[column.dataIndex])\r\n      ),\r\n    ]);\r\n\r\n    const wb = XLSX.utils.book_new();\r\n    XLSX.utils.book_append_sheet(wb, ws, \"Sheet1\");\r\n    XLSX.writeFile(wb, \"exported-data.xlsx\");\r\n  };\r\n\r\n  return (\r\n    <div>\r\n    \r\n\r\n      <Button type=\"primary\" onClick={exportToExcel}>\r\n        Export to Excel\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExportToExcel;\r\n","import React, { useState } from \"react\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Select from \"@mui/material/Select\";\r\nimport MenuItem from \"@mui/material/MenuItem\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport InputLabel from \"@mui/material/InputLabel\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Table from \"@mui/material/Table\";\r\nimport TableBody from \"@mui/material/TableBody\";\r\nimport TableCell from \"@mui/material/TableCell\";\r\nimport TableContainer from \"@mui/material/TableContainer\";\r\nimport TableHead from \"@mui/material/TableHead\";\r\nimport TableRow from \"@mui/material/TableRow\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport { Card, Checkbox, Typography } from \"@mui/material\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport UserApi from \"apis/UserApi\";\r\nimport ReportsApi from \"apis/ReportsApi\";\r\nimport moment from \"moment\";\r\nimport { DatePicker } from \"@mui/x-date-pickers\";\r\nimport ExportToExcel from \"features/dashboard/ExportToExcel\";\r\n\r\nconst TransactionLog = () => {\r\n  //   const [projectId, setProjectId] = useState(1);\r\n  const [productId, setProductId] = useState(1);\r\n  const [From, setFrom] = useState();\r\n  const [To, setTo] = useState();\r\n  const [filter, setFilter] = useState(\"\");\r\n  const { enqueueSnackbar } = useSnackbar();\r\n\r\n  const [formData, setFormData] = React.useState({\r\n    store: \"\",\r\n    field2: \"\",\r\n    field3: \"\",\r\n    field4: \"\",\r\n    field5: \"\",\r\n    field6: \"\",\r\n    selectField: \"\",\r\n  });\r\n\r\n  const getStoreSKUResult = ReportsApi.useGetTransactionLogsQuery({\r\n    // Location,\r\n    From,\r\n    To,\r\n    filter,\r\n  });\r\n  const storeSKU = getStoreSKUResult.data;\r\n\r\n  const getStoreResult = UserApi.useGetStoreQuery({\r\n    //   ProjectType,\r\n    //   Location,\r\n  });\r\n  const productStore = getStoreResult?.data;\r\n\r\n  //   const globalBin = getGlobalBinResult?.data;\r\n\r\n  const header = [\"#\", \"User\", \"Date\", \"Activity\"];\r\n\r\n  const handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setProductId(value);\r\n    setFormData({\r\n      ...formData,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  let dataz = storeSKU?.map((e) => ({\r\n    user: e?.username,\r\n    date: moment(e?.date).format(\"ll\"),\r\n    activity: e?.activity,\r\n  }));\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    // Handle form submission with formData\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Typography className=\"text-center font-bold my-5\" variant=\"h3\">\r\n        Transaction Logs\r\n      </Typography>\r\n      <div className=\"flex flex-col gap-6 items-start\">\r\n        <Card\r\n          title=\"\"\r\n          className=\"px-8 py-4 w-full bg-black rounded-2xl flex flex-col gap-6 items-start\"\r\n        >\r\n          <div class=\"flex justify-between items-center w-full\">\r\n            <div className=\"flex items-center\">\r\n              {/* <Button>Csv</Button> */}\r\n              <ExportToExcel data={dataz} header={header} />\r\n              <Button className=\"ml-4\">PDF</Button>\r\n            </div>\r\n            <div class=\"flex gap-6\">\r\n              <DatePicker\r\n                // label='Select Date'\r\n                toolbarPlaceholder=\"ji\"\r\n                disableFuture\r\n                value={From}\r\n                onChange={(newValue) => {\r\n                  console.log(newValue);\r\n                  setFrom(newValue);\r\n                }}\r\n                renderInput={(params) => (\r\n                  <TextField size=\"small\" margin=\"dense\" {...params} />\r\n                )}\r\n              />\r\n              <DatePicker\r\n                // label='Select Date'\r\n                toolbarPlaceholder=\"ji\"\r\n                disablePast\r\n                value={To}\r\n                onChange={(newValue) => {\r\n                  setTo(newValue);\r\n                }}\r\n                renderInput={(params) => (\r\n                  <TextField size=\"small\" margin=\"dense\" {...params} />\r\n                )}\r\n              />\r\n            </div>\r\n          </div>\r\n          <TableContainer component={Paper}>\r\n            <Table>\r\n              <TableHead>\r\n                <TableRow className=\"font-bold\">\r\n                  <TableCell className=\"font-bold text-base\">#</TableCell>\r\n                  <TableCell className=\"font-bold text-base\">User</TableCell>\r\n\r\n                  <TableCell className=\"font-bold text-base\">Date</TableCell>\r\n                  <TableCell className=\"font-bold text-base\">Action</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {storeSKU?.map((row, idx) => (\r\n                  <TableRow\r\n                    key={row.id}\r\n                    className={\r\n                      row.balance <= row.reOrderLevel &&\r\n                      \"bg-red-300 animate-pulse\"\r\n                    }\r\n                  >\r\n                    <TableCell>{idx + 1}</TableCell>\r\n                    <TableCell>{row.username}</TableCell>\r\n\r\n                    <TableCell>\r\n                      {moment(row.date).format(\"YYYY-MM-DD\")}\r\n                    </TableCell>\r\n                    <TableCell>{row.activity}</TableCell>\r\n                    {/* <TableCell>{row.column6}</TableCell> */}\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n\r\n          {/* <div className=\"flex items-center mt-12 self-end\">\r\n            <Button>First</Button>\r\n            <Button>Prev</Button>\r\n            <Button>Next</Button>\r\n            <Button>Last</Button>\r\n          </div> */}\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TransactionLog;\r\n"],"names":["BASE_URL","SoftwrkApi","endpoints","builder","getSkuStocks","query","arg","productId","url","concat","method","getStocksByLocation","locationId","getProductBalances","userType","getAllProductsBalance","getAuditLogs","pageNo","console","log","params","getTransactionLogs","From","To","filter","getRackBalance","RackId","getReceivingLog","getReleaseLog","getMeasuringUnits","getStats","_ref","data","header","dataSource","useEffect","columns","map","e","title","toUpperCase","dataIndex","toLowerCase","key","_jsx","children","Button","type","onClick","exportToExcel","ws","XLSX","column","t","v","s","font","bold","record","wb","TransactionLog","setProductId","useState","setFrom","setTo","setFilter","enqueueSnackbar","useSnackbar","formData","setFormData","React","store","field2","field3","field4","field5","field6","selectField","storeSKU","ReportsApi","getStoreResult","UserApi","dataz","user","username","date","moment","format","activity","_jsxs","Typography","className","variant","Card","class","ExportToExcel","DatePicker","toolbarPlaceholder","disableFuture","value","onChange","newValue","renderInput","TextField","size","margin","disablePast","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","TableBody","row","idx","balance","reOrderLevel","id"],"sourceRoot":""}