{"version":3,"file":"static/js/2832.86d6ab5b.chunk.js","mappings":"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","sources":["features/Dashboards&Reports/GlobalBin.js","features/dashboard/ExportToExcel.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Select from \"@mui/material/Select\";\r\nimport MenuItem from \"@mui/material/MenuItem\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport InputLabel from \"@mui/material/InputLabel\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Table from \"@mui/material/Table\";\r\nimport TableBody from \"@mui/material/TableBody\";\r\nimport TableCell from \"@mui/material/TableCell\";\r\nimport TableContainer from \"@mui/material/TableContainer\";\r\nimport TableHead from \"@mui/material/TableHead\";\r\nimport TableRow from \"@mui/material/TableRow\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport { Card, Checkbox, TablePagination, Typography } from \"@mui/material\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport UserApi from \"apis/UserApi\";\r\nimport ExportToExcel from \"features/dashboard/ExportToExcel\";\r\n\r\nconst GlobalBin = () => {\r\n  const [ProjectType, setProjectType] = useState(1);\r\n  const [Location, setLocation] = useState(1);\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const [searchitemHolder, setsearchitemHolder] = React.useState([]);\r\n  const [searchitemText, setsearchitemText] = React.useState(\"\");\r\n\r\n  const getGlobalBinResult = UserApi.useGetGlobalBinQuery({\r\n    ProjectType,\r\n    Location,\r\n  });\r\n  const globalBin = getGlobalBinResult?.data;\r\n\r\n  const [formData, setFormData] = React.useState({\r\n    field1: \"\",\r\n    field2: \"\",\r\n    field3: \"\",\r\n    field4: \"\",\r\n    field5: \"\",\r\n    field6: \"\",\r\n    selectField: \"\",\r\n  });\r\n\r\n  const handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setFormData({\r\n      ...formData,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    // Handle form submission with formData\r\n  };\r\n\r\n  function filterListByArray(text) {\r\n    // return originalList.filter(item =>\r\n    setsearchitemText(text);\r\n    let pp = globalBin?.filter((array) =>\r\n      array?.product?.toLowerCase()?.includes(text?.toLowerCase())\r\n    );\r\n\r\n    console.log(pp);\r\n\r\n    setsearchitemHolder(pp);\r\n    // );\r\n  }\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(10);\r\n\r\n  // ... (other code remains unchanged)\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Typography className=\"text-center font-bold my-5\" variant=\"h4\">\r\n        Global Bin Card\r\n      </Typography>\r\n      <div className=\"flex flex-col gap-6 items-start\">\r\n        <Card\r\n          title=\"\"\r\n          className=\"px-8 py-4 w-full bg-black rounded-2xl flex flex-col gap-6 items-start\"\r\n        >\r\n          {/* <Button className=\"bg-red-500 text-white flex\">\r\n            Delete Selected Items\r\n          </Button> */}\r\n\r\n          <div class=\"flex flex-between w-full\">\r\n            <div className=\"flex items-center\">\r\n              {/* {/* <Button>Csv</Button> */}\r\n              <ExportToExcel\r\n                data={globalBin}\r\n                header={[\r\n                  \"#\",\r\n                  \"Product\",\r\n                  \"Code\",\r\n                  \"Location\",\r\n                  \"GM\",\r\n                  \"Special\",\r\n                  \"FFM\",\r\n                  \"Non-Technical\",\r\n                ]}\r\n              />\r\n              {/* <Button>Excel</Button> */}\r\n              <Button className=\"ml-4\">PDF</Button>\r\n            </div>\r\n            <TextField\r\n              placeholder=\"Search table\"\r\n              className=\"\"\r\n              onChange={(e) => filterListByArray(e.target.value)}\r\n            />\r\n          </div>\r\n          <TableContainer component={Paper}>\r\n            <Table>\r\n              <TableHead>\r\n                <TableRow className=\"font-bold\">\r\n                  <TableCell className=\"font-bold text-base\">#</TableCell>\r\n                  <TableCell className=\"font-bold text-base\">Product</TableCell>\r\n                  <TableCell className=\"font-bold text-base\">Code</TableCell>\r\n                  <TableCell className=\"font-bold text-base\">\r\n                    Location\r\n                  </TableCell>\r\n                  <TableCell className=\"font-bold text-base\">GM</TableCell>\r\n                  <TableCell className=\"font-bold text-base\">Special</TableCell>\r\n                  <TableCell className=\"font-bold text-base\">FFM</TableCell>\r\n                  <TableCell className=\"font-bold text-base\">\r\n                    Non-Technical\r\n                  </TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {(searchitemText.length > 0 ? searchitemHolder : globalBin)\r\n                  ?.slice(page * rowsPerPage, (page + 1) * rowsPerPage)\r\n                  ?.map((row, idx) => (\r\n                    <TableRow key={row.id}>\r\n                      <TableCell>{idx + 1}</TableCell>\r\n                      <TableCell>{row.product}</TableCell>\r\n                      <TableCell>{row.code}</TableCell>\r\n                      <TableCell>{row.location}</TableCell>\r\n                      <TableCell>{row.gm}</TableCell>\r\n                      <TableCell>{row.special}</TableCell>\r\n                      <TableCell>{row.ffm}</TableCell>\r\n                      <TableCell>{row.nonTechnical}</TableCell>\r\n                      {/* <TableCell>{row.column6}</TableCell> */}\r\n                    </TableRow>\r\n                  ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n\r\n          <div class=\"bg-white w-full\">\r\n            <TablePagination\r\n              rowsPerPageOptions={[10, 25, 50, 100]}\r\n              component=\"div\"\r\n              count={\r\n                (searchitemText.length > 0 ? searchitemHolder : globalBin)\r\n                  ?.length\r\n              }\r\n              rowsPerPage={rowsPerPage}\r\n              page={page}\r\n              onPageChange={handleChangePage}\r\n              onRowsPerPageChange={handleChangeRowsPerPage}\r\n            />\r\n          </div>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GlobalBin;\r\n","// import React from \"react\";\r\n// import { CSVLink } from \"react-csv\";\r\n\r\n// const ExportToExcel = () => {\r\n//   const data = [\r\n//     // Bold headers row\r\n//     [\r\n//       { value: \"Name\", style: { bold: true } },\r\n//       { value: \"Age\", style: { bold: true } },\r\n//       { value: \"Country\", style: { bold: true } },\r\n//     ],\r\n//     // Data rows\r\n//     [\"John Doe\", 25, \"USA\"],\r\n//     [\"Jane Smith\", 30, \"Canada\"],\r\n//     // Add more rows as needed\r\n//   ];\r\n\r\n//   const excelTitle = \"My Excel Sheet\";\r\n\r\n//   return (\r\n//     <div>\r\n//       <h1>Export Data to Excel</h1>\r\n//       <table>\r\n//         <tbody>\r\n//           {data.map((row, index) => (\r\n//             <tr key={index}>\r\n//               {row.map((cell, cellIndex) => (\r\n//                 <td key={cellIndex} style={cell.style}>\r\n//                   {cell.value}\r\n//                 </td>\r\n//               ))}\r\n//             </tr>\r\n//           ))}\r\n//         </tbody>\r\n//       </table>\r\n\r\n//       <CSVLink data={data} filename={\"exported-data.csv\"} target=\"_blank\">\r\n//         {excelTitle}\r\n//       </CSVLink>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default ExportToExcel;\r\n\r\nimport { Button } from \"@mui/material\";\r\nimport React from \"react\";\r\nimport { useEffect } from \"react\";\r\n// import { Table, Button } from 'antd';\r\n// import { ExcelOutlined } from '@ant-design/icons';\r\nimport * as XLSX from \"xlsx\";\r\n\r\nconst ExportToExcel = ({ data, header }) => {\r\n  // Sample data for the Ant Design table\r\n  let dataSource = [];\r\n  // { key: \"1\", name: \"John Doe\", age: 25, country: \"USA\" },\r\n  // { key: \"2\", name: \"Jane Smith\", age: 30, country: \"Canada\" },\r\n  // Add more data as needed\r\n\r\n  //   console.log(data);\r\n\r\n  useEffect(() => {\r\n    // console.log(data);\r\n    dataSource = data;\r\n  }, [data]);\r\n\r\n  // Columns configuration for the Ant Design table\r\n  const columns = header.map((e) => ({\r\n    title: e?.toUpperCase(),\r\n    dataIndex: e.toLowerCase(),\r\n    key: e,\r\n  }));\r\n\r\n  // { title: \"Age\", dataIndex: \"age\", key: \"age\" },\r\n  // { title: \"Country\", dataIndex: \"country\", key: \"country\" },\r\n  // Add more columns as needed\r\n\r\n  const exportToExcel = () => {\r\n    // Create a worksheet with bold headers\r\n    const ws = XLSX.utils.aoa_to_sheet([\r\n      columns.map((column) => ({\r\n        t: \"s\",\r\n        v: column.title,\r\n        s: { font: { bold: true } },\r\n      })),\r\n      ...dataSource.map((record) =>\r\n        columns.map((column) => record[column.dataIndex])\r\n      ),\r\n    ]);\r\n\r\n    const wb = XLSX.utils.book_new();\r\n    XLSX.utils.book_append_sheet(wb, ws, \"Sheet1\");\r\n    XLSX.writeFile(wb, \"exported-data.xlsx\");\r\n  };\r\n\r\n  return (\r\n    <div>\r\n    \r\n\r\n      <Button type=\"primary\" onClick={exportToExcel}>\r\n        Export to Excel\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExportToExcel;\r\n"],"names":["GlobalBin","_ref","_ref$slice","_ref2","ProjectType","setProjectType","useState","Location","setLocation","enqueueSnackbar","useSnackbar","searchitemHolder","setsearchitemHolder","React","searchitemText","setsearchitemText","getGlobalBinResult","UserApi","globalBin","data","formData","setFormData","field1","field2","field3","field4","field5","field6","selectField","page","setPage","rowsPerPage","setRowsPerPage","_jsxs","children","_jsx","Typography","className","variant","Card","title","class","ExportToExcel","header","Button","TextField","placeholder","onChange","e","text","pp","filter","array","_array$product","_array$product$toLowe","product","toLowerCase","includes","console","log","filterListByArray","target","value","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","TableBody","length","slice","map","row","idx","code","location","gm","special","ffm","nonTechnical","id","TablePagination","rowsPerPageOptions","count","onPageChange","handleChangePage","event","newPage","onRowsPerPageChange","parseInt","dataSource","useEffect","columns","toUpperCase","dataIndex","key","type","onClick","exportToExcel","ws","XLSX","column","t","v","s","font","bold","record","wb"],"sourceRoot":""}