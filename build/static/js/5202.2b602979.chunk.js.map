{"version":3,"file":"static/js/5202.2b602979.chunk.js","mappings":"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","sources":["apis/DeliveryApi.js","apis/RackApi.js","apis/ReportsApi.js","apis/ReqApi.js","apis/StockApi.js","apis/StoreApi.js","features/stock/StockIntake.js"],"sourcesContent":["import { SoftwrkApi } from \"configs/StoreQueryConfig\";\r\n\r\nconst BASE_URL = \"/delivery\";\r\n\r\nexport const DeliveryApi = SoftwrkApi.injectEndpoints({\r\n  endpoints: (builder) => ({\r\n    finalDelivery: builder.mutation({\r\n      query: (config) => ({\r\n        url: `${BASE_URL}`,\r\n        method: \"POST\",\r\n        ...config,\r\n      }),\r\n    }),\r\n    // deleteJob: builder.mutation({\r\n    //   query: ({ path, ...config }) => ({\r\n    //     url: `${JOBS_BASE_URL}/${path.id}`,\r\n    //     method: \"DELETE\",\r\n    //     ...config,\r\n    //   }),\r\n    //   invalidatesTags: (_, error, { path }) =>\r\n    //     !error ? invalidateTags(StoreQueryTagEnum.JOB, { ids: [path.id] }) : [],\r\n    // }),\r\n\r\n    discard: builder.mutation({\r\n      query: (config) => ({\r\n        url: `${BASE_URL}/Discard-Delivery`,\r\n        method: \"DELETE\",\r\n        ...config,\r\n      }),\r\n    }),\r\n    stockDelivery: builder.mutation({\r\n      query: (config) => ({\r\n        url: `${BASE_URL}/add-delivery-Item`,\r\n        method: \"POST\",\r\n        ...config,\r\n      }),\r\n    }),\r\n\r\n    getAllDeliveries: builder.query({\r\n      query: (arg) => {\r\n        // const { userType } = arg;\r\n        return {\r\n          url: `${BASE_URL}`,\r\n          method: \"GET\",\r\n          // params: { userType },\r\n        };\r\n      },\r\n    }),\r\n\r\n    // allDeliveries: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { userType } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}`,\r\n    //       method: \"GET\",\r\n    //       // params: { userType },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    getTempDeliveries: builder.query({\r\n      query: (arg) => {\r\n        const { userType } = arg;\r\n        return {\r\n          url: `${BASE_URL}/Get-DeliveryDetails`,\r\n          method: \"GET\",\r\n          // params: { userType },\r\n        };\r\n      },\r\n    }),\r\n   \r\n\r\n    // getAllRidersForCompany: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { userId } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/super-admin/getallriderscompany`,\r\n    //       method: \"GET\",\r\n    //       params: { userId },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n   \r\n  }),\r\n});\r\n\r\n// ;\r\n\r\nexport default DeliveryApi;\r\n","import { SoftwrkApi } from \"configs/StoreQueryConfig\";\r\n\r\nconst BASE_URL = \"/rack\";\r\n\r\nexport const UserApi = SoftwrkApi.injectEndpoints({\r\n  endpoints: (builder) => ({\r\n    // receiveStock: builder.mutation({\r\n    //   query: (config) => ({\r\n    //     url: `${BASE_URL}/Receive-Stock`,\r\n    //     method: \"POST\",\r\n    //     ...config,\r\n    //   }),\r\n    // }),\r\n    productRack: builder.mutation({\r\n      query: (config) => ({\r\n        url: `${BASE_URL}/Product-Rack`,\r\n        method: \"PUT\",\r\n        ...config,\r\n      }),\r\n    }),\r\n    createRacks: builder.mutation({\r\n      query: (config) => ({\r\n        url: `${BASE_URL}/`,\r\n        method: \"POST\",\r\n        ...config,\r\n      }),\r\n    }),\r\n\r\n    getRack: builder.query({\r\n      query: (arg) => {\r\n        const { reloadItems } = arg;\r\n        return {\r\n          url: `${BASE_URL}`,\r\n          method: \"GET\",\r\n          // params: { reloadItems },\r\n        };\r\n      },\r\n    }),\r\n\r\n    getRackShelves: builder.query({\r\n      query: (arg) => {\r\n        const { reloadItems } = arg;\r\n        return {\r\n          url: `${BASE_URL}/shelves`,\r\n          method: \"GET\",\r\n          // params: { reloadItems },\r\n        };\r\n      },\r\n    }),\r\n\r\n    getShelvesByRackId: builder.query({\r\n      query: (arg) => {\r\n        const { id } = arg;\r\n        return {\r\n          url: `${BASE_URL}/${id}`,\r\n          method: \"GET\",\r\n          // params: { userType },\r\n        };\r\n      },\r\n    }),\r\n\r\n    getShelves: builder.query({\r\n      query: (arg) => {\r\n        const { userType } = arg;\r\n        return {\r\n          url: `${BASE_URL}/shelves`,\r\n          method: \"GET\",\r\n          // params: { userType },\r\n        };\r\n      },\r\n    }),\r\n    getProductsByRack: builder.query({\r\n      query: (arg) => {\r\n        const { RackId } = arg;\r\n        return {\r\n          url: `${BASE_URL}/Rack-Products/${RackId}`,\r\n          method: \"GET\",\r\n          // params: { RackId },\r\n        };\r\n      },\r\n    }),\r\n\r\n    // getStoreStock: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { userType } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/products`,\r\n    //       method: \"GET\",\r\n    //       // params: { userType },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    // getStoreTaggingDetail: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { deliveryItemId, unit } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/get-taggingDetail`,\r\n    //       method: \"GET\",\r\n    //       params: {  deliveryItemId, unit },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    // getTempStocks: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { userType } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/Get-TmpStocks`,\r\n    //       method: \"GET\",\r\n    //       // params: { userType },\r\n    //     };\r\n    //   },\r\n    // }),\r\n    // getItemDetail: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { itemId } = arg;\r\n    //     // console.log(pageNo);\r\n    //     return {\r\n    //       url: `${BASE_URL}/Get-ItemDetails/${itemId}/`,\r\n    //       method: \"GET\",\r\n    //       // params: { pageNo },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    // getStoreStocks: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { userType, pageNo } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/Get-Store-Stocks`,\r\n    //       method: \"GET\",\r\n    //       params: { userType, pageNo },\r\n    //     };\r\n    //   },\r\n    // }),\r\n    // getGlobalBin: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { ProjectType, Location} = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/Get-Global-Bincard`,\r\n    //       method: \"GET\",\r\n    //       // param nas: {  ProjectType, Location },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    // getBinCard: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { ProjectType, Location} = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/Get-BinCard`,\r\n    //       method: \"GET\",\r\n    //       params: {  ProjectType, Location },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    // getAllCompanyRiders: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { userType } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/company/getalluser`,\r\n    //       method: \"GET\",\r\n    //       params: { userType },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    // getAllCompanyCustomers: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { userType } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/company/getalluser`,\r\n    //       method: \"GET\",\r\n    //       params: { userType },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    // getAllTrips: builder.query({\r\n    //   query: (arg) => {\r\n    //     // const { userType } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/super-admin/getAllTripRequest`,\r\n    //       method: \"GET\",\r\n    //       // params: { userType },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    // getAllRidersForCompany: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { userId } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/super-admin/getallriderscompany`,\r\n    //       method: \"GET\",\r\n    //       params: { userId },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    getStats: builder.query({\r\n      query: (arg) => {\r\n        // const { userType } = arg;\r\n        return {\r\n          url: `${BASE_URL}/super-admin/userStatsChart`,\r\n          method: \"GET\",\r\n          // params: { userType },\r\n        };\r\n      },\r\n    }),\r\n  }),\r\n});\r\n\r\n// ;\r\n\r\nexport default UserApi;\r\n","import { SoftwrkApi } from \"configs/StoreQueryConfig\";\r\n\r\nconst BASE_URL = \"/Reports\";\r\n\r\nexport const ReportsApi = SoftwrkApi.injectEndpoints({\r\n  endpoints: (builder) => ({\r\n    // signup: builder.mutation({\r\n    //   query: (config) => ({\r\n    //     url: `${BASE_URL}/signup`,\r\n    //     method: \"POST\",\r\n    //     ...config,\r\n    //   }),\r\n    // }),\r\n    // stockDelivery: builder.mutation({\r\n    //   query: (config) => ({\r\n    //     url: `${BASE_URL}/add-delivery-Item`,\r\n    //     method: \"POST\",\r\n    //     ...config,\r\n    //   }),\r\n    // }),\r\n\r\n    getSkuStocks: builder.query({\r\n      query: (arg) => {\r\n        const { productId } = arg;\r\n        return {\r\n          url: `${BASE_URL}/Get-Stocks-SKU/${productId}`,\r\n          method: \"GET\",\r\n          //   params: { productId },\r\n        };\r\n      },\r\n    }),\r\n    getStocksByLocation: builder.query({\r\n      query: (arg) => {\r\n        const { locationId } = arg;\r\n        return {\r\n          url: `${BASE_URL}/Get-Stocks-Location/${locationId}`,\r\n          method: \"GET\",\r\n          //   params: { productId },\r\n        };\r\n      },\r\n    }),\r\n\r\n    getProductBalances: builder.query({\r\n      // Get-Products-Balances\r\n      query: (arg) => {\r\n        const { userType } = arg;\r\n        return {\r\n          url: `${BASE_URL}/Get-Products-Store-Balances`,\r\n          method: \"GET\",\r\n          // params: { userType },\r\n        };\r\n      },\r\n    }),\r\n\r\n\r\n    getAllProductsBalance: builder.query({\r\n      query: (arg) => {\r\n        const { userType } = arg;\r\n        return {\r\n          url: `${BASE_URL}/Get-Products-Balances`,\r\n          method: \"GET\",\r\n          // params: { userType },\r\n        };\r\n      },\r\n    }),\r\n    getAuditLogs: builder.query({\r\n      query: (arg) => {\r\n        const { pageNo } = arg;\r\n        console.log(pageNo);\r\n        return {\r\n          url: `${BASE_URL}/Get-AuditLogs`,\r\n          method: \"GET\",\r\n          params: { pageNo },\r\n        };\r\n      },\r\n    }),\r\n\r\n    getTransactionLogs: builder.query({\r\n      query: (arg) => {\r\n        const { From, To, filter } = arg;\r\n        // console.log(pageNo);\r\n        return {\r\n          url: `${BASE_URL}/Get-TransactionLogs`,\r\n          method: \"GET\",\r\n          params: { From, To, filter  },\r\n        };\r\n      },\r\n    }),\r\n    getRackBalance: builder.query({\r\n      query: (arg) => {\r\n        const { RackId } = arg;\r\n        return {\r\n          url: `${BASE_URL}/Get-Rack-Balance/${RackId}`,\r\n          method: \"GET\",\r\n          // params: { RackId },\r\n        };\r\n      },\r\n    }),\r\n\r\n    getReceivingLog: builder.query({\r\n      query: (arg) => {\r\n        const { userType } = arg;\r\n        return {\r\n          url: `${BASE_URL}/Receiving-Log`,\r\n          method: \"GET\",\r\n          params: { userType },\r\n        };\r\n      },\r\n    }),\r\n\r\n    getReleaseLog: builder.query({\r\n      query: (arg) => {\r\n        const { userType } = arg;\r\n        return {\r\n          url: `${BASE_URL}/Receiving-Log`,\r\n          method: \"GET\",\r\n          params: { userType },\r\n        };\r\n      },\r\n    }),\r\n    getMeasuringUnits: builder.query({\r\n      query: (arg) => {\r\n        // const { userType } = arg;\r\n        return {\r\n          url: `${BASE_URL}/Get-MeasureUnits`,\r\n          method: \"GET\",\r\n          // params: { userType },\r\n        };\r\n      },\r\n    }),\r\n\r\n   \r\n    // getAllCompanyCustomers: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { userType } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/company/getalluser`,\r\n    //       method: \"GET\",\r\n    //       params: { userType },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    // getAllTrips: builder.query({\r\n    //   query: (arg) => {\r\n    //     // const { userType } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/super-admin/getAllTripRequest`,\r\n    //       method: \"GET\",\r\n    //       // params: { userType },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    // getAllRidersForCompany: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { userId } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/super-admin/getallriderscompany`,\r\n    //       method: \"GET\",\r\n    //       params: { userId },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    getStats: builder.query({\r\n      query: (arg) => {\r\n        // const { userType } = arg;\r\n        return {\r\n          url: `${BASE_URL}/super-admin/userStatsChart`,\r\n          method: \"GET\",\r\n          // params: { userType },\r\n        };\r\n      },\r\n    }),\r\n  }),\r\n});\r\n\r\n// ;\r\n\r\nexport default ReportsApi;\r\n","import { SoftwrkApi } from \"configs/StoreQueryConfig\";\r\n\r\nconst BASE_URL = \"/req\";\r\n\r\nexport const ReqApi = SoftwrkApi.injectEndpoints({\r\n  endpoints: (builder) => ({\r\n    confirmRelease: builder.mutation({\r\n      query: (config) => ({\r\n        url: `${BASE_URL}/confirm-release`,\r\n        method: \"POST\",\r\n        ...config,\r\n      }),\r\n    }),\r\n    approval: builder.mutation({\r\n      query: (config) => ({\r\n        url: `${BASE_URL}/approval`,\r\n        method: \"POST\",\r\n        ...config,\r\n      }),\r\n    }),\r\n    request: builder.mutation({\r\n      query: (config) => ({\r\n        url: `${BASE_URL}/request`,\r\n        method: \"POST\",\r\n        ...config,\r\n      }),\r\n    }),\r\n\r\n    getRequest: builder.query({\r\n      query: (arg) => {\r\n        const { userType } = arg;\r\n        return {\r\n          url: `${BASE_URL}/`,\r\n          method: \"GET\",\r\n          // params: { userType },\r\n        };\r\n      },\r\n    }),\r\n\r\n    getRequestDetail: builder.query({\r\n      query: (arg) => {\r\n        const { RequestCode } = arg;\r\n        return {\r\n          url: `${BASE_URL}/Get-Request-Detail/${RequestCode}`,\r\n          method: \"GET\",\r\n          // params: { userType },\r\n        };\r\n      },\r\n    }),\r\n\r\n    getReleasedStocks: builder.query({\r\n      query: (arg) => {\r\n        const { RequestCode } = arg;\r\n        return {\r\n          url: `${BASE_URL}/Get-Released-Stocks/${RequestCode}`,\r\n          method: \"GET\",\r\n          // params: { userType },\r\n        };\r\n      },\r\n    }),\r\n\r\n   \r\n\r\n    getTagging: builder.query({\r\n      query: (arg) => {\r\n        const { userType } = arg;\r\n        return {\r\n          url: `${BASE_URL}/`,\r\n          method: \"GET\",\r\n          // params: { userType },\r\n        };\r\n      },\r\n    }),\r\n\r\n    getPendingRelease: builder.query({\r\n      query: (arg) => {\r\n        const { userType } = arg;\r\n        return {\r\n          url: `${BASE_URL}/Pending-Release`,\r\n          method: \"GET\",\r\n          // params: { userType },\r\n        };\r\n      },\r\n    }),\r\n\r\n    getProcessedApprovalRequest: builder.query({\r\n      query: (arg) => {\r\n        const { userType } = arg;\r\n        return {\r\n          url: `${BASE_URL}/Get-Processed-Approval-Requests`,\r\n          method: \"GET\",\r\n          // params: { userType },\r\n        };\r\n      },\r\n    }),\r\n\r\n    getCategories: builder.query({\r\n      query: (arg) => {\r\n        const { userType } = arg;\r\n        return {\r\n          url: `${BASE_URL}/category`,\r\n          method: \"GET\",\r\n          // params: { userType },\r\n        };\r\n      },\r\n    }),\r\n  }),\r\n});\r\n\r\n// ;\r\n\r\nexport default ReqApi;\r\n","import { SoftwrkApi } from \"configs/StoreQueryConfig\";\r\n\r\nconst BASE_URL = \"/stocks\";\r\n\r\nexport const StockApi = SoftwrkApi.injectEndpoints({\r\n  endpoints: (builder) => ({\r\n    // signup: builder.mutation({\r\n    //   query: (config) => ({\r\n    //     url: `${BASE_URL}/signup`,\r\n    //     method: \"POST\",\r\n    //     ...config,\r\n    //   }),\r\n    // }),\r\n    stockIntake: builder.mutation({\r\n      query: (config) => ({\r\n        url: `${BASE_URL}/intake`,\r\n        method: \"POST\",\r\n        ...config,\r\n      }),\r\n    }),\r\n    stockTransferIntake: builder.mutation({\r\n      query: (config) => ({\r\n        url: `${BASE_URL}/Transfer-Intake`,\r\n        method: \"POST\",\r\n        ...config,\r\n      }),\r\n    }),\r\n    stockOutbound: builder.mutation({\r\n      query: (config) => ({\r\n        url: `${BASE_URL}/Outbound`,\r\n        method: \"POST\",\r\n        ...config,\r\n      }),\r\n    }),\r\n\r\n    getIntakes: builder.query({\r\n      query: (arg) => {\r\n        // const { userType } = arg;\r\n        return {\r\n          url: `${BASE_URL}/intakes`,\r\n          method: \"GET\",\r\n          // params: { userType },\r\n        };\r\n      },\r\n    }),\r\n  }),\r\n});\r\n\r\n// ;\r\n\r\nexport default StockApi;\r\n","import { SoftwrkApi } from \"configs/StoreQueryConfig\";\r\n\r\nconst BASE_URL = '/store'\r\n\r\nexport const StoreApi = SoftwrkApi.injectEndpoints({\r\n  endpoints: (builder) => ({\r\n    // receiveStock: builder.mutation({\r\n    //   query: (config) => ({\r\n    //     url: `${BASE_URL}/Receive-Stock`,\r\n    //     method: \"POST\",\r\n    //     ...config,\r\n    //   }),\r\n    // }),\r\n    // receiveStock: builder.mutation({\r\n    //   query: (config) => ({\r\n    //     url: `${BASE_URL}/receive-stock`,\r\n    //     method: \"POST\",\r\n    //     ...config,\r\n    //   }),\r\n    // }),\r\n    // receiveStomaterialReturnck: builder.mutation({\r\n    //   query: (config) => ({\r\n    //     url: `${BASE_URL}/Material-Return`,\r\n    //     method: \"POST\",\r\n    //     ...config,\r\n    //   }),\r\n    // }),\r\n\r\n    getStores: builder.query({\r\n      query: (arg) => {\r\n        const { userType } = arg;\r\n        return {\r\n          url: `${BASE_URL}`,\r\n          method: \"GET\",\r\n          // params: { userType },\r\n        };\r\n      },\r\n    }),\r\n\r\n    getShelvesByRackId: builder.query({\r\n      query: (arg) => {\r\n        const { id } = arg;\r\n        return {\r\n          url: `${BASE_URL}/${id}`,\r\n          method: \"GET\",\r\n          // params: { userType },\r\n        };\r\n      },\r\n    }),\r\n\r\n    getShelves: builder.query({\r\n      query: (arg) => {\r\n        const { userType } = arg;\r\n        return {\r\n          url: `${BASE_URL}/shelves`,\r\n          method: \"GET\",\r\n          // params: { userType },\r\n        };\r\n      },\r\n    }),\r\n    // getStoreLocations: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { userType } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/Get-Locations`,\r\n    //       method: \"GET\",\r\n    //       // params: { userType },\r\n    //     };\r\n    //   },\r\n    // }),\r\n    \r\n\r\n    // getStoreStock: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { userType } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/products`,\r\n    //       method: \"GET\",\r\n    //       // params: { userType },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    // getStoreTaggingDetail: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { deliveryItemId, unit } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/get-taggingDetail`,\r\n    //       method: \"GET\",\r\n    //       params: {  deliveryItemId, unit },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n\r\n    \r\n\r\n    // getTempStocks: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { userType } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/Get-TmpStocks`,\r\n    //       method: \"GET\",\r\n    //       // params: { userType },\r\n    //     };\r\n    //   },\r\n    // }),\r\n    // getItemDetail: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { itemId } = arg;\r\n    //     // console.log(pageNo);\r\n    //     return {\r\n    //       url: `${BASE_URL}/Get-ItemDetails/${itemId}/`,\r\n    //       method: \"GET\",\r\n    //       // params: { pageNo },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    // getStoreStocks: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { userType, pageNo } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/Get-Store-Stocks`,\r\n    //       method: \"GET\",\r\n    //       params: { userType, pageNo },\r\n    //     };\r\n    //   },\r\n    // }),\r\n    // getGlobalBin: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { ProjectType, Location} = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/Get-Global-Bincard`,\r\n    //       method: \"GET\",\r\n    //       // param nas: {  ProjectType, Location },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    // getBinCard: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { ProjectType, Location} = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/Get-BinCard`,\r\n    //       method: \"GET\",\r\n    //       params: {  ProjectType, Location },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    // getAllCompanyRiders: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { userType } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/company/getalluser`,\r\n    //       method: \"GET\",\r\n    //       params: { userType },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    // getAllCompanyCustomers: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { userType } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/company/getalluser`,\r\n    //       method: \"GET\",\r\n    //       params: { userType },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    // getAllTrips: builder.query({\r\n    //   query: (arg) => {\r\n    //     // const { userType } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/super-admin/getAllTripRequest`,\r\n    //       method: \"GET\",\r\n    //       // params: { userType },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    // getAllRidersForCompany: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { userId } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/super-admin/getallriderscompany`,\r\n    //       method: \"GET\",\r\n    //       params: { userId },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    getStats: builder.query({\r\n      query: (arg) => {\r\n        // const { userType } = arg;\r\n        return {\r\n          url: `${BASE_URL}/super-admin/userStatsChart`,\r\n          method: \"GET\",\r\n          // params: { userType },\r\n        };\r\n      },\r\n    }),\r\n  }),\r\n});\r\n\r\n// ;\r\n\r\nexport default StoreApi;\r\n","import React from \"react\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Select from \"@mui/material/Select\";\r\nimport MenuItem from \"@mui/material/MenuItem\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport InputLabel from \"@mui/material/InputLabel\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Table from \"@mui/material/Table\";\r\nimport TableBody from \"@mui/material/TableBody\";\r\nimport TableCell from \"@mui/material/TableCell\";\r\nimport TableContainer from \"@mui/material/TableContainer\";\r\nimport TableHead from \"@mui/material/TableHead\";\r\nimport TableRow from \"@mui/material/TableRow\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport { Autocomplete, Card, Typography } from \"@mui/material\";\r\nimport UserApi from \"apis/UserApi\";\r\nimport StockApi from \"apis/StockApi\";\r\nimport RackApi from \"apis/RackApi\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport ReportsApi from \"apis/ReportsApi\";\r\nimport moment from \"moment\";\r\nimport DeliveryApi from \"apis/DeliveryApi\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport StoreApi from \"apis/StoreApi\";\r\nimport ReqApi from \"apis/ReqApi\";\r\nimport { ArrowBackTwoTone } from \"@mui/icons-material\";\r\n\r\nconst StockIntake = () => {\r\n  const [formData, setFormData] = React.useState({\r\n    rack: \"\",\r\n    // rackId:'',\r\n    shelfCode: \"\",\r\n    shelfCode1: \"\",\r\n    productBarcode: \"\",\r\n    quantity: 0,\r\n  });\r\n  const { enqueueSnackbar } = useSnackbar();\r\n\r\n  const [TaggingId, setTaggingId] = React.useState();\r\n  const [RequestCode, setRequestCode] = React.useState();\r\n  const [requestObj, setrequestObj] = React.useState();\r\n  const [isLoading, setisLoading] = React.useState(false);\r\n\r\n  const redirect = useNavigate();\r\n\r\n  // StoreStocks\r\n  const getRacksQueryResult = RackApi.useGetRackQuery({});\r\n  const rack = getRacksQueryResult?.data;\r\n\r\n  const [stockConfirmReleaseMuation, stockConfirmReleaseMutationResult] =\r\n    StockApi.useStockTransferIntakeMutation();\r\n\r\n  const getShelvesByRackQueryResult = RackApi.useGetShelvesByRackIdQuery({\r\n    id: formData.rack,\r\n  });\r\n  const shelvesByRack = getShelvesByRackQueryResult?.data || [];\r\n\r\n  const getShelvesQueryResult = RackApi.useGetShelvesQuery({});\r\n  const shelves = getShelvesQueryResult?.data || [];\r\n\r\n  const getProductsQuery = UserApi.useGetStoreProductsQuery({ TaggingId });\r\n  const products = getProductsQuery?.data || [];\r\n\r\n  const getAllDeliveryQuery = DeliveryApi.useGetAllDeliveriesQuery();\r\n  const allDeliveries = getAllDeliveryQuery.data || [];\r\n\r\n  const [stockIntakeMuation, stockIntakeMutationResult] =\r\n    StockApi.useStockIntakeMutation();\r\n\r\n  const getStoreStocksQueryResult = UserApi.useGetStoreStocksQuery({\r\n    TaggingId,\r\n  });\r\n  const getRequestsQueryResult = ReqApi.useGetRequestQuery({\r\n    TaggingId,\r\n  });\r\n  const requests = getRequestsQueryResult?.data || [];\r\n\r\n  const getRequestsDetailsQueryResult = ReqApi.useGetReleasedStocksQuery({\r\n    RequestCode,\r\n  });\r\n  const requestsDetails = getRequestsDetailsQueryResult?.data || [];\r\n\r\n  const storeStockInStore = getStoreStocksQueryResult?.data || [];\r\n\r\n  const getProductsInStoresResult = ReportsApi.useGetProductBalancesQuery({});\r\n  const productsInStore = getProductsInStoresResult?.data || [];\r\n\r\n  const getStoreQueryResult = StoreApi.useGetStoresQuery({});\r\n  const stores = getStoreQueryResult?.data || [];\r\n\r\n  // const getStoresQueryResult = StoreApi.useGetStoresQuery({});\r\n  // const stores = getStoresQueryResult?.data;\r\n\r\n  const [receiveStockMuation, receiveStockMutationResult] =\r\n    UserApi.useReceiveStockMutation();\r\n\r\n  const data = [\r\n    {\r\n      id: 1,\r\n      column1: \"\",\r\n      column2: \"\",\r\n      column3: \"\",\r\n      column4: \"\",\r\n      column5: \"\",\r\n      column6: \"\",\r\n    },\r\n    {\r\n      id: 2,\r\n      column1: \"\",\r\n      column2: \"\",\r\n      column3: \"\",\r\n      column4: \"\",\r\n      column5: \"\",\r\n      column6: \"\",\r\n    },\r\n    // Add more data as needed\r\n  ];\r\n\r\n  const dataApproval = [\r\n    { store: \"Store A\", dateCreated: \"2023-01-15\", items: 50 },\r\n    { store: \"Store B\", dateCreated: \"2023-02-10\", items: 30 },\r\n    { store: \"Store C\", dateCreated: \"2023-03-05\", items: 70 },\r\n    // Add more data entries here\r\n  ];\r\n\r\n  const postIntake = async () => {\r\n    setisLoading(true);\r\n    let payload = {\r\n      shelfCode: formData.shelfCode,\r\n      productBarcode: products?.find(\r\n        (prod) => prod?.id === formData.productBarcode\r\n      )?.barcode,\r\n      quantity: +formData.quantity,\r\n    };\r\n\r\n    if (+formData.quantity == 0) {\r\n      enqueueSnackbar(\"Failed! Quantity cannot be Zero\", {\r\n        variant: \"error\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    console.log(payload);\r\n    try {\r\n      setisLoading(false);\r\n      const data = await stockIntakeMuation({ data: payload }).unwrap();\r\n      // TODO extra login\r\n      // console.log(data.data);\r\n      enqueueSnackbar(\"successful\", { variant: \"success\" });\r\n      // setRefreshD((orev)=>orev+1)\r\n      redirect(\"/receiving-log\");\r\n    } catch (error) {\r\n      setisLoading(false);\r\n      console.log(error);\r\n      enqueueSnackbar(error?.data, \"Failed to login\", {\r\n        variant: \"error\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setFormData({\r\n      ...formData,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    // Handle form submission with formData\r\n  };\r\n\r\n  const catchRequestId = (row) => {\r\n    setRequestCode(row.code);\r\n    setrequestObj(row);\r\n    console.log(row.code);\r\n  };\r\n\r\n  console.log(\r\n    allDeliveries?.filter((item) =>\r\n      products\r\n        ?.filter((barcodedProducts) => barcodedProducts.barcode)\r\n        ?.some((filterItem) => filterItem?.id === item?.productId)\r\n    )\r\n    // ?.filter((prod) => prod?.barcode)\r\n\r\n    // ?.map((e) => ({\r\n    //   label: products?.find((product) => e?.productId === product?.id)?.name,\r\n    //   id: e?.productId,\r\n    // }))\r\n  );\r\n  return (\r\n    <div>\r\n      {/* <Button onClick={() => redirect(\"/receiving-log\")}>Redirect</Button> */}\r\n      <Typography className=\"text-center font-bold my-5\" variant=\"h4\">\r\n        Stock Intake\r\n      </Typography>\r\n      <div className=\"flex gap-6\">\r\n        <div title=\"\" className=\"px-8 py-4 w-full bg-black rounded-2xl\">\r\n          <div className=\"mb-5\">\r\n            <div className=\"flex gap-6\">\r\n              <div className=\"flex justify-between gap-6 w-full\">\r\n                <div className=\"w-full\">\r\n                  <Typography className=\"text-white mb-2 ml-3 w-full\">\r\n                    Select Product\r\n                  </Typography>\r\n                  <FormControl className=\"w-full\" fullWidth>\r\n                    {/* <InputLabel>Select Field</InputLabel> */}\r\n                    <Autocomplete\r\n                      className=\" m-2\"\r\n                      disablePortal\r\n                      onChange={\r\n                        (event, newValue) =>\r\n                          // handleChange(event, newValue)\r\n                          setFormData({\r\n                            ...formData,\r\n                            productBarcode: newValue?.id,\r\n                          })\r\n                        // console.log(newValue)\r\n                      }\r\n                      // id=\"combo-box-demo\"\r\n                      options={allDeliveries\r\n                        ?.filter((item) =>\r\n                          products\r\n                            ?.filter(\r\n                              (barcodedProducts) => barcodedProducts.barcode\r\n                            )\r\n                            ?.some(\r\n                              (filterItem) => filterItem?.id === item?.productId\r\n                            )\r\n                        )\r\n                        // ?.filter((prod) => prod?.barcode)\r\n\r\n                        ?.map((e) => ({\r\n                          label: products?.find(\r\n                            (product) => e?.productId === product?.id\r\n                          )?.name,\r\n                          id: e?.productId,\r\n                        }))}\r\n                      sx={{ width: 300 }}\r\n                      renderInput={(params) => <TextField {...params} />}\r\n                    />\r\n                  </FormControl>\r\n                </div>\r\n                <div className=\"w-full\">\r\n                  <Typography className=\"text-white mb-2 ml-3 w-full\">\r\n                    Select Store\r\n                  </Typography>\r\n                  <FormControl className=\"w-full\" fullWidth>\r\n                    {/* <InputLabel>Select Field</InputLabel> */}\r\n                    <Select\r\n                      className=\"bg-white w-full\"\r\n                      name=\"storeId\"\r\n                      value={formData.storeId}\r\n                      onChange={handleChange}\r\n                    >\r\n                      {stores?.map((e) => (\r\n                        <MenuItem value={e?.id}>{e?.name}</MenuItem>\r\n                      ))}\r\n                    </Select>\r\n                  </FormControl>\r\n                </div>\r\n                <div className=\"\">\r\n                  <Typography className=\"text-white mb-2 ml-3\">\r\n                    Select Rack\r\n                  </Typography>\r\n\r\n                  <FormControl fullWidth>\r\n                    {/* <InputLabel>Select Field</InputLabel> */}\r\n                    <Autocomplete\r\n                      className=\"m-2\"\r\n                      disablePortal\r\n                      onChange={\r\n                        (event, newValue) =>\r\n                          // handleChange(event, newValue)\r\n                          setFormData({ ...formData, rack: newValue?.id })\r\n                        // console.log(newValue)\r\n                      }\r\n                      // id=\"combo-box-demo\"\r\n                      options={rack\r\n                        ?.filter((e) => e?.storeId == formData.storeId)\r\n                        ?.map((e) => ({\r\n                          label: e?.name,\r\n                          id: e?.id,\r\n                        }))}\r\n                      sx={{ minWidth: 200 }}\r\n                      renderInput={(params) => <TextField {...params} />}\r\n                    />\r\n                  </FormControl>\r\n                </div>\r\n                <div className=\"w-full\">\r\n                  <Typography className=\"text-white mb-2 ml-3 w-full\">\r\n                    Select Shelf\r\n                  </Typography>\r\n                  <FormControl className=\"w-full\" fullWidth>\r\n                    {/* <InputLabel>Select Field</InputLabel> */}\r\n                    {/* <Autocomplete\r\n                      className=\"m-2\"\r\n                      disablePortal\r\n                      onChange={\r\n                        (event, newValue) =>\r\n                          // handleChange(event, newValue)\r\n                          setFormData({\r\n                            ...formData,\r\n                            shelfCode: newValue?.label,\r\n                          })\r\n                        // console.log(newValue)\r\n                      }\r\n                      // id=\"combo-box-demo\"\r\n                      options={[shelvesByRack?.shelves||[]]?.map((e) => ({\r\n                        label: e?.label,\r\n                        id: e?.label,\r\n                      }))}\r\n                      // sx={{ width: 300 }}\r\n                      renderInput={(params) => <TextField {...params} />}\r\n                    /> */}\r\n                    <Select\r\n                      className=\"bg-white w-full\"\r\n                      name=\"shelfCode\"\r\n                      value={formData.shelfCode}\r\n                      onChange={handleChange}\r\n                    >\r\n                      {shelvesByRack?.shelves?.map((e) => (\r\n                        <MenuItem value={e?.label}>{e?.label}</MenuItem>\r\n                      ))}\r\n                    </Select>\r\n                  </FormControl>\r\n                </div>\r\n\r\n                <div className=\"w-full\">\r\n                  <Typography className=\"text-white mb-2 ml-3 w-full\">\r\n                    Quantity\r\n                  </Typography>\r\n                  {/* <InputLabel>Select Field</InputLabel> */}\r\n                  <TextField\r\n                    className=\"bg-white rounded-full w-full min-w-[100px]\"\r\n                    // label=\"Field 1\"\r\n                    name=\"quantity\"\r\n                    value={formData.quantity}\r\n                    onChange={handleChange}\r\n                    fullWidth\r\n                    placeholder=\"Click to input Quantity\"\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <Button className=\"mt-4\" onClick={postIntake}>\r\n              Add\r\n            </Button>\r\n          </div>\r\n          {/* <TableContainer component={Paper}>\r\n            <Table>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell className=\"font-bold text-base\"></TableCell>\r\n                  <TableCell className=\"font-bold text-base\">Store</TableCell>\r\n                  <TableCell className=\"font-bold text-base\">Items</TableCell>\r\n                  <TableCell className=\"font-bold text-base\">\r\n                    Date Created\r\n                  </TableCell>\r\n                  <TableCell className=\"font-bold text-base\">\r\n                    Reorder Level\r\n                  </TableCell>\r\n                  <TableCell className=\"font-bold text-base\">Balance</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {productsInStore?.map((row) => (\r\n                  <TableRow key={row.id}>\r\n                    <TableCell>{row?.column1}</TableCell>\r\n                    <TableCell>{row?.warehouse}</TableCell>\r\n                    <TableCell>{row?.product}</TableCell>\r\n                    <TableCell>\r\n                      {moment(row?.lpDate).format(\"YYYY-MM-DD\")}\r\n                    </TableCell>\r\n                    <TableCell>{row?.reOrderLevel}</TableCell>\r\n                    <TableCell>{row.balance}</TableCell>\r\n                  </TableRow>\r\n                  // <div></div>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer> */}\r\n\r\n          {/* <TableContainer component={Paper}>\r\n      <Table>\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell>Store</TableCell>\r\n            <TableCell>Date Created</TableCell>\r\n            <TableCell>Items</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {dataApproval.map((row, index) => (\r\n            <TableRow key={index}>\r\n              <TableCell>{row.store}</TableCell>\r\n              <TableCell>{row.dateCreated}</TableCell>\r\n              <TableCell>{row.items}</TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer> */}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StockIntake;\r\n"],"names":["BASE_URL","SoftwrkApi","endpoints","builder","finalDelivery","mutation","query","config","url","concat","method","discard","stockDelivery","getAllDeliveries","arg","getTempDeliveries","userType","productRack","createRacks","getRack","reloadItems","getRackShelves","getShelvesByRackId","id","getShelves","getProductsByRack","RackId","getStats","getSkuStocks","productId","getStocksByLocation","locationId","getProductBalances","getAllProductsBalance","getAuditLogs","pageNo","console","log","params","getTransactionLogs","From","To","filter","getRackBalance","getReceivingLog","getReleaseLog","getMeasuringUnits","confirmRelease","approval","request","getRequest","getRequestDetail","RequestCode","getReleasedStocks","getTagging","getPendingRelease","getProcessedApprovalRequest","getCategories","stockIntake","stockTransferIntake","stockOutbound","getIntakes","getStores","StockIntake","_allDeliveries$filter","_rack$filter","_shelvesByRack$shelve","formData","setFormData","React","rack","shelfCode","shelfCode1","productBarcode","quantity","enqueueSnackbar","useSnackbar","TaggingId","setTaggingId","setRequestCode","requestObj","setrequestObj","isLoading","setisLoading","redirect","useNavigate","getRacksQueryResult","RackApi","data","stockConfirmReleaseMuation","stockConfirmReleaseMutationResult","StockApi","getShelvesByRackQueryResult","shelvesByRack","getShelvesQueryResult","getProductsQuery","UserApi","products","allDeliveries","DeliveryApi","stockIntakeMuation","stockIntakeMutationResult","getStoreStocksQueryResult","getRequestsQueryResult","ReqApi","getRequestsDetailsQueryResult","getProductsInStoresResult","ReportsApi","getStoreQueryResult","StoreApi","stores","receiveStockMuation","receiveStockMutationResult","handleChange","event","name","value","target","item","_products$filter","barcodedProducts","barcode","some","filterItem","_jsxs","children","_jsx","Typography","className","variant","title","FormControl","fullWidth","Autocomplete","disablePortal","onChange","newValue","options","_products$filter2","map","e","_products$find2","label","find","product","sx","width","renderInput","TextField","Select","storeId","MenuItem","minWidth","shelves","placeholder","Button","onClick","async","_products$find","payload","prod","unwrap","error"],"sourceRoot":""}