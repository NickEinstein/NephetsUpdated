{"version":3,"file":"static/js/6716.bc5c47e7.chunk.js","mappings":"qIAEA,MAAMA,EAAW,YAsDjB,EApD2BC,EAAAA,EAAAA,gBAA2B,CACpDC,UAAYC,IAAO,CAuBjBC,YAAaD,EAAQE,MAAM,CACzBA,MAAQC,IACN,MAAM,SAAEC,GAAaD,EACrB,MAAO,CACLE,IAAI,GAADC,OAAKT,GACRU,OAAQ,MAET,IAMLC,SAAUR,EAAQE,MAAM,CACtBA,MAAQC,IAEC,CACLE,IAAI,GAADC,OAAKT,EAAQ,+BAChBU,OAAQ,a,kDC5ClB,MAAMV,EAAW,WAkLjB,EAhL0BC,EAAAA,EAAAA,gBAA2B,CACnDC,UAAYC,IAAO,CAgBjBS,aAAcT,EAAQE,MAAM,CAC1BA,MAAQC,IACN,MAAM,UAAEO,GAAcP,EACtB,MAAO,CACLE,IAAI,GAADC,OAAKT,EAAQ,oBAAAS,OAAmBI,GACnCH,OAAQ,MAET,IAGLI,oBAAqBX,EAAQE,MAAM,CACjCA,MAAQC,IACN,MAAM,WAAES,GAAeT,EACvB,MAAO,CACLE,IAAI,GAADC,OAAKT,EAAQ,yBAAAS,OAAwBM,GACxCL,OAAQ,MAET,IAILM,mBAAoBb,EAAQE,MAAM,CAEhCA,MAAQC,IACN,MAAM,SAAEC,GAAaD,EACrB,MAAO,CACLE,IAAI,GAADC,OAAKT,EAAQ,gCAChBU,OAAQ,MAET,IAKLO,sBAAuBd,EAAQE,MAAM,CACnCA,MAAQC,IACN,MAAM,SAAEC,GAAaD,EACrB,MAAO,CACLE,IAAI,GAADC,OAAKT,EAAQ,0BAChBU,OAAQ,MAET,IAGLQ,aAAcf,EAAQE,MAAM,CAC1BA,MAAQC,IACN,MAAM,OAAEa,GAAWb,EAEnB,OADAc,QAAQC,IAAIF,GACL,CACLX,IAAI,GAADC,OAAKT,EAAQ,kBAChBU,OAAQ,MACRY,OAAQ,CAAEH,UACX,IAILI,mBAAoBpB,EAAQE,MAAM,CAChCA,MAAQC,IACN,MAAM,KAAEkB,EAAI,GAAEC,EAAE,OAAEC,GAAWpB,EAE7B,MAAO,CACLE,IAAI,GAADC,OAAKT,EAAQ,wBAChBU,OAAQ,MACRY,OAAQ,CAAEE,OAAMC,KAAIC,UACrB,IAGLC,eAAgBxB,EAAQE,MAAM,CAC5BA,MAAQC,IACN,MAAM,OAAEsB,GAAWtB,EACnB,MAAO,CACLE,IAAI,GAADC,OAAKT,EAAQ,sBAAAS,OAAqBmB,GACrClB,OAAQ,MAET,IAILmB,gBAAiB1B,EAAQE,MAAM,CAC7BA,MAAQC,IACN,MAAM,SAAEC,GAAaD,EACrB,MAAO,CACLE,IAAI,GAADC,OAAKT,EAAQ,kBAChBU,OAAQ,MACRY,OAAQ,CAAEf,YACX,IAILuB,cAAe3B,EAAQE,MAAM,CAC3BA,MAAQC,IACN,MAAM,SAAEC,GAAaD,EACrB,MAAO,CACLE,IAAI,GAADC,OAAKT,EAAQ,kBAChBU,OAAQ,MACRY,OAAQ,CAAEf,YACX,IAGLwB,kBAAmB5B,EAAQE,MAAM,CAC/BA,MAAQC,IAEC,CACLE,IAAI,GAADC,OAAKT,EAAQ,qBAChBU,OAAQ,UAwCdC,SAAUR,EAAQE,MAAM,CACtBA,MAAQC,IAEC,CACLE,IAAI,GAADC,OAAKT,EAAQ,+BAChBU,OAAQ,a,mFCtHlB,MAsDA,EAtDsBsB,IAAuB,IAAtB,KAAEC,EAAI,OAAEC,GAAQF,EAEjCG,EAAa,IAOjBC,EAAAA,EAAAA,YAAU,KAERD,EAAaF,CAAI,GAChB,CAACA,IAGJ,MAAMI,EAAUH,EAAOI,KAAKC,IAAC,CAC3BC,MAAQ,OAADD,QAAC,IAADA,OAAC,EAADA,EAAGE,cACVC,UAAWH,EAAEI,cACbC,IAAKL,MAyBP,OACEM,EAAAA,EAAAA,KAAA,OAAAC,UAGED,EAAAA,EAAAA,KAACE,EAAAA,EAAM,CAACC,KAAK,UAAUC,QAtBLC,KAEpB,MAAMC,EAAKC,EAAAA,GAAAA,aAAwB,CACjCf,EAAQC,KAAKe,IAAM,CACjBC,EAAG,IACHC,EAAGF,EAAOb,MACVgB,EAAG,CAAEC,KAAM,CAAEC,MAAM,WAElBvB,EAAWG,KAAKqB,GACjBtB,EAAQC,KAAKe,GAAWM,EAAON,EAAOX,iBAIpCkB,EAAKR,EAAAA,GAAAA,WACXA,EAAAA,GAAAA,kBAA6BQ,EAAIT,EAAI,UACrCC,EAAAA,GAAeQ,EAAI,qBAAqB,EAOQd,SAAC,qBAG3C,C,mSCpGV,MAoFA,EAlF4B7C,EAAAA,EAAAA,gBAA2B,CACrDC,UAAYC,IAAO,CACjB0D,gBAAiB1D,EAAQ2D,SAAS,CAChCzD,MAAO2B,IAAA,IAAC,KAAE+B,KAASC,GAAQhC,EAAA,MAAM,CAC/BxB,IAAI,GAADC,OANM,aAMO,sBAAAA,OAAqBsD,GACrCrD,OAAQ,MAET,Q,eCWP,MAiZA,EAjZqBuD,KAAO,IAADjC,EAAAkC,EAAAC,EACzB,MAAOC,EAAUC,IAAeC,EAAAA,EAAAA,UAAS,IACnC,gBAAEC,IAAoBC,EAAAA,EAAAA,MAEtBC,EAAgBC,EAAAA,EAAAA,oBAAgC,CACpD,GAEIC,EAA0B,OAAbF,QAAa,IAAbA,OAAa,EAAbA,EAAexC,KAE5B2C,EAAyBC,EAAAA,EAAAA,8BAAyC,CACtET,aAMIU,EAAsC,OAAtBF,QAAsB,IAAtBA,GAAAA,EAAwB3C,KACV,QADcD,EAC9C,IAAI4C,EAAuB3C,aAAK,IAAAD,OAAA,EAAhCA,EAAkC+C,UAClC,GAEEC,EAA0BH,EAAAA,EAAAA,0BAAqC,CAGnE,GAEII,EAAsC,OAAvBD,QAAuB,IAAvBA,OAAuB,EAAvBA,EAAyB/C,MAEvCiD,EAAUC,GAAeC,EAAAA,SAAe,CAC7CC,WAAY,GACZC,aAAc,GACdC,cAAe,GACfC,KAAM,GACNC,YAAa,MAGRC,EAAkBC,GAAuBP,EAAAA,SAAe,KACxDQ,EAAWC,GAAgBT,EAAAA,UAAe,IAC1CU,EAAOC,GAAYX,EAAAA,SAAe,OAClCY,EAAgBC,GAAqBb,EAAAA,SAAe,KACpDc,EAAsBC,GAC3BC,EAAAA,EAAAA,4BAEKC,EAAsBC,GAC3BC,EAAAA,6BAEIC,EAAgBC,IACpB,MAAM,KAAEjB,EAAI,MAAEkB,GAAUD,EAAME,OAC9BxB,EAAY,IACPD,EACH,CAACM,GAAOkB,GACR,EAkDEE,EAAeC,UACnB,IAAIC,EAAU,IACT5B,EACH6B,QAAS,EACTC,oBAAoB,EACpBC,yBAAyB,EACzBC,qBAAqB,EACrBC,WAAW,EACXC,mBAAoB,IACpBC,mBAAmB,GAGrBxB,GAAa,GAEb,IACE,GAAIf,EAAcwC,MAAM/E,IAAO,OAADA,QAAC,IAADA,OAAC,EAADA,EAAGiD,OAAQN,EAASM,OAEhD,YADAjB,EAAgB,sBAAuB,CAAEgD,QAAS,UAKpD,GACW,OAARrC,QAAQ,IAARA,IAAAA,EAAUG,YACF,OAARH,QAAQ,IAARA,IAAAA,EAAUI,cACF,OAARJ,QAAQ,IAARA,IAAAA,EAAUK,eACF,OAARL,QAAQ,IAARA,IAAAA,EAAUM,MACF,OAARN,QAAQ,IAARA,IAAAA,EAAUO,YAOX,OALAlB,EAAgB,4CAA6C,CAC3DgD,QAAS,eAEb1B,GAAa,SAKMK,EAAqB,CAAEjE,KAAM6E,IAAWU,SAG3DjD,EAAgB,uBAAwB,CAAEgD,QAAS,YACnDpC,EAAY,CACVE,WAAY,GACZC,aAAc,GACdC,cAAe,GACfC,KAAM,GACNC,YAAa,KAEfpB,GAAaoD,GAASA,EAAO,IAC7B5B,GAAa,GACbE,EAAS,KAQX,CALE,MAAO2B,GACPnD,EAAqB,OAALmD,QAAK,IAALA,OAAK,EAALA,EAAOC,QAAS,kBAAmB,CACjDJ,QAAS,UAEX1B,GAAa,EACf,GA0BF,OACE+B,EAAAA,EAAAA,MAAA,OAAA9E,SAAA,EACED,EAAAA,EAAAA,KAACgF,EAAAA,EAAU,CAACC,UAAU,6BAA6BP,QAAQ,KAAIzE,SAAC,mBAGhED,EAAAA,EAAAA,KAAA,OAAKiF,UAAU,SAAQhF,UACrB8E,EAAAA,EAAAA,MAACG,EAAAA,EAAI,CAACD,UAAU,mDAAkDhF,SAAA,EAChE8E,EAAAA,EAAAA,MAAA,QAAME,UAAU,6BAA6BE,SAzI/BzF,IACpBqE,IACArE,EAAE0F,gBAAgB,EAuIwDnF,SAAA,EAClE8E,EAAAA,EAAAA,MAAA,OAAKE,UAAU,kCAAiChF,SAAA,EAC9CD,EAAAA,EAAAA,KAAA,OAAKiF,UAAU,cAAahF,UAC1B8E,EAAAA,EAAAA,MAAA,OAAKM,MAAM,0BAAyBpF,SAAA,EAClC8E,EAAAA,EAAAA,MAAA,OAAKE,UAAU,SAAQhF,SAAA,EACrBD,EAAAA,EAAAA,KAACgF,EAAAA,EAAU,CAAA/E,SAAC,sBACZD,EAAAA,EAAAA,KAACsF,EAAAA,EAAW,CAACL,UAAU,SAASM,WAAS,EAAAtF,UACvCD,EAAAA,EAAAA,KAACwF,EAAAA,EAAY,CACX3B,MAAOZ,EACPgC,UAAU,MACVQ,eAAa,EACbC,SACEA,CAAC9B,EAAO+B,KAGJrD,EAAY,IACPD,EACHG,WAAoB,OAARmD,QAAQ,IAARA,OAAQ,EAARA,EAAUC,KAExB1C,EAASyC,EAAS,EAKxBE,QAA0B,QAAnBxE,EAAGS,GAAc,UAAE,IAAAT,OAAA,EAAjBA,EAAoB5B,KAAKC,IAAC,CACjCoG,MAAQ,OAADpG,QAAC,IAADA,OAAC,EAADA,EAAGiD,KACViD,GAAK,OAADlG,QAAC,IAADA,OAAC,EAADA,EAAGkG,OAETG,GAAI,CAAEC,SAAU,KAChBC,YAAcxH,IAAWuB,EAAAA,EAAAA,KAACkG,EAAAA,EAAS,IAAKzH,YAe9CsG,EAAAA,EAAAA,MAAA,OAAKE,UAAU,SAAQhF,SAAA,EACrBD,EAAAA,EAAAA,KAACgF,EAAAA,EAAU,CAAA/E,SAAC,mBACZD,EAAAA,EAAAA,KAACkG,EAAAA,EAAS,CACRjB,UAAU,wBAEVtC,KAAK,eACLkB,MAAOxB,EAASI,aAChBiD,SAAU/B,EACV4B,WAAS,aAKjBR,EAAAA,EAAAA,MAAA,OAAKE,UAAU,aAAYhF,SAAA,EACzBD,EAAAA,EAAAA,KAAA,OAAKiF,UAAU,aAkBfjF,EAAAA,EAAAA,KAAA,OAAKiF,UAAU,SAAQhF,UASrB8E,EAAAA,EAAAA,MAAA,OAAKE,UAAU,SAAQhF,SAAA,EACrBD,EAAAA,EAAAA,KAACgF,EAAAA,EAAU,CAAA/E,SAAC,uBACZD,EAAAA,EAAAA,KAACsF,EAAAA,EAAW,CAACL,UAAU,SAASM,WAAS,EAAAtF,UAEvCD,EAAAA,EAAAA,KAACmG,EAAAA,EAAM,CACLlB,UAAU,kBACVtC,KAAK,gBACLkB,MAAOxB,EAASK,cAChBgD,SAAU/B,EAAa1D,SAEV,OAAZmC,QAAY,IAAZA,OAAY,EAAZA,EAAc3C,KAAKC,IAClBM,EAAAA,EAAAA,KAACoG,EAAAA,EAAQ,CAACvC,MAAQ,OAADnE,QAAC,IAADA,OAAC,EAADA,EAAG2G,WAAWpG,SAAG,OAADP,QAAC,IAADA,OAAC,EAADA,EAAG4G,sBAOhDvB,EAAAA,EAAAA,MAAA,OAAKE,UAAU,aAAYhF,SAAA,EACzB8E,EAAAA,EAAAA,MAAA,OAAKE,UAAU,UAAShF,SAAA,EACtBD,EAAAA,EAAAA,KAACgF,EAAAA,EAAU,CAAA/E,SAAC,UACZD,EAAAA,EAAAA,KAACkG,EAAAA,EAAS,CACRjB,UAAU,wBACVtC,KAAK,OACLkB,MAAOxB,EAASM,KAChB+C,SAAU/B,EACV4B,WAAS,QAGbR,EAAAA,EAAAA,MAAA,OAAKE,UAAU,UAAShF,SAAA,EACtBD,EAAAA,EAAAA,KAACgF,EAAAA,EAAU,CAAA/E,SAAC,eACZD,EAAAA,EAAAA,KAACkG,EAAAA,EAAS,CACRjB,UAAU,wBAEVtC,KAAK,cACLkB,MAAOxB,EAASO,YAChB8C,SAAU/B,EACV4B,WAAS,cAMjBvF,EAAAA,EAAAA,KAAA,OAAKiF,UAAU,uCAAsChF,UACnD8E,EAAAA,EAAAA,MAAC7E,EAAAA,EAAM,CACLC,KAAK,SACLuE,QAAQ,YAERO,UAAU,gFAEVhF,SAAA,CAEC8C,IACC/C,EAAAA,EAAAA,KAAA,OAAKqF,MAAM,mCAAkCpF,UAC3CD,EAAAA,EAAAA,KAAA,OAAKqF,MAAM,6EAEb,gBAMRN,EAAAA,EAAAA,MAAA,OAAKM,MAAM,oBAAmBpF,SAAA,EAC5B8E,EAAAA,EAAAA,MAAA,OAAKE,UAAU,8BAA6BhF,SAAA,EAE1CD,EAAAA,EAAAA,KAACuG,EAAAA,EAAa,CAACnH,KAAM6C,EAAe5C,OApLjC,CACb,IACA,UACA,WACA,OAEA,UACA,mBA8KUW,EAAAA,EAAAA,KAACE,EAAAA,EAAM,CAAC+E,UAAU,OAAMhF,SAAC,YAE3BD,EAAAA,EAAAA,KAACkG,EAAAA,EAAS,CACRM,YAAY,eACZvB,UAAU,GACVS,SAAWhG,GAhLvB,SAA2B+G,GAEzBrD,EAAkBqD,GAClB,IAAIC,EAAkB,OAAbzE,QAAa,IAAbA,OAAa,EAAbA,EAAepD,QAAQ8H,IAAK,IAAAC,EAAAC,EAAA,OAC9B,OAALF,QAAK,IAALA,GAAW,QAANC,EAALD,EAAOhE,YAAI,IAAAiE,GAAe,QAAfC,EAAXD,EAAa9G,qBAAa,IAAA+G,OAArB,EAALA,EAA4BC,SAAa,OAAJL,QAAI,IAAJA,OAAI,EAAJA,EAAM3G,cAAc,IAG3DvB,QAAQC,IAAIkI,GAEZ5D,EAAoB4D,EAEtB,CAqK6BK,CAAkBrH,EAAEoE,OAAOD,aAIhD7D,EAAAA,EAAAA,KAACgH,EAAAA,EAAc,CAACC,UAAWC,EAAAA,EAAMjH,UAC/B8E,EAAAA,EAAAA,MAACoC,EAAAA,EAAK,CAAAlH,SAAA,EACJD,EAAAA,EAAAA,KAACoH,EAAAA,EAAS,CAAAnH,UACR8E,EAAAA,EAAAA,MAACsC,EAAAA,EAAQ,CAACpC,UAAU,YAAWhF,SAAA,EAC7BD,EAAAA,EAAAA,KAACsH,EAAAA,EAAS,CAACrC,UAAU,sBAAqBhF,SAAC,OAC3CD,EAAAA,EAAAA,KAACsH,EAAAA,EAAS,CAACrC,UAAU,sBAAqBhF,SAAC,aAC3CD,EAAAA,EAAAA,KAACsH,EAAAA,EAAS,CAACrC,UAAU,sBAAqBhF,SAAC,cAG3CD,EAAAA,EAAAA,KAACsH,EAAAA,EAAS,CAACrC,UAAU,sBAAqBhF,SAAC,UAE3CD,EAAAA,EAAAA,KAACsH,EAAAA,EAAS,CAACrC,UAAU,sBAAqBhF,SAAC,aAC3CD,EAAAA,EAAAA,KAACsH,EAAAA,EAAS,CAACrC,UAAU,sBAAqBhF,SAAC,mBAI3CD,EAAAA,EAAAA,KAACsH,EAAAA,EAAS,CAACrC,UAAU,sBAAqBhF,SAAC,4BAK/CD,EAAAA,EAAAA,KAACuH,EAAAA,EAAS,CAAAtH,SAGS,QAHTqB,EACN6B,EAAeqE,OAAS,EACtB3E,EACAZ,SAAa,IAAAX,OAAA,EAFhBA,EAGE7B,KAAI,CAACgI,EAAKC,KACX3C,EAAAA,EAAAA,MAACsC,EAAAA,EAAQ,CAAApH,SAAA,EACPD,EAAAA,EAAAA,KAACsH,EAAAA,EAAS,CAAArH,SAAEyH,EAAM,KAClB1H,EAAAA,EAAAA,KAACsH,EAAAA,EAAS,CAAArH,SAAEwH,EAAI9E,QAChB3C,EAAAA,EAAAA,KAACsH,EAAAA,EAAS,CAAArH,SAAEwH,EAAIE,YAChB3H,EAAAA,EAAAA,KAACsH,EAAAA,EAAS,CAAArH,SAAEwH,EAAIG,QAChB5H,EAAAA,EAAAA,KAACsH,EAAAA,EAAS,CAAArH,SAAEwH,EAAII,WAChB9C,EAAAA,EAAAA,MAACuC,EAAAA,EAAS,CAAArH,SAAA,CAAEwH,EAAIhF,aAAa,QAE7BzC,EAAAA,EAAAA,KAACsH,EAAAA,EAAS,CAAArH,UACRD,EAAAA,EAAAA,KAACE,EAAAA,EAAM,CAACE,QAASA,IArUb4D,WAgBtB,UACqBR,EAAqB,CACtCpE,KAAM0I,EACN5G,KAAM4G,EAAKlC,KACVjB,SAGHjD,EAAgB,+BAAgC,CAAEgD,QAAS,WAc7D,CAJE,MAAOG,GAAQ,IAADkD,EACdrG,EAAqB,OAALmD,QAAK,IAALA,GAAW,QAANkD,EAALlD,EAAOzF,YAAI,IAAA2I,OAAN,EAALA,EAAajD,QAAS,kBAAmB,CACvDJ,QAAS,SAEb,GAgSyCsD,CAAgBP,GAAKxH,SAAC,yBATlCwH,EAAI7B,oBAqB3B,C","sources":["apis/CategoryApi.js","apis/ReportsApi.js","features/dashboard/ExportToExcel.js","apis/InventoryApi.js","features/itemCreation/ItemCreation.js"],"sourcesContent":["import { SoftwrkApi } from \"configs/StoreQueryConfig\";\r\n\r\nconst BASE_URL = '/category'\r\n\r\nexport const CategoryApi = SoftwrkApi.injectEndpoints({\r\n  endpoints: (builder) => ({\r\n    // receiveStock: builder.mutation({\r\n    //   query: (config) => ({\r\n    //     url: `${BASE_URL}/Receive-Stock`,\r\n    //     method: \"POST\",\r\n    //     ...config,\r\n    //   }),\r\n    // }),\r\n    // receiveStock: builder.mutation({\r\n    //   query: (config) => ({\r\n    //     url: `${BASE_URL}/receive-stock`,\r\n    //     method: \"POST\",\r\n    //     ...config,\r\n    //   }),\r\n    // }),\r\n    // receiveStomaterialReturnck: builder.mutation({\r\n    //   query: (config) => ({\r\n    //     url: `${BASE_URL}/Material-Return`,\r\n    //     method: \"POST\",\r\n    //     ...config,\r\n    //   }),\r\n    // }),\r\n\r\n    getCategory: builder.query({\r\n      query: (arg) => {\r\n        const { userType } = arg;\r\n        return {\r\n          url: `${BASE_URL}`,\r\n          method: \"GET\",\r\n          // params: { userType },\r\n        };\r\n      },\r\n    }),\r\n\r\n    \r\n\r\n    getStats: builder.query({\r\n      query: (arg) => {\r\n        // const { userType } = arg;\r\n        return {\r\n          url: `${BASE_URL}/super-admin/userStatsChart`,\r\n          method: \"GET\",\r\n          // params: { userType },\r\n        };\r\n      },\r\n    }),\r\n  }),\r\n});\r\n\r\n// ;\r\n\r\nexport default CategoryApi;\r\n","import { SoftwrkApi } from \"configs/StoreQueryConfig\";\r\n\r\nconst BASE_URL = \"/Reports\";\r\n\r\nexport const ReportsApi = SoftwrkApi.injectEndpoints({\r\n  endpoints: (builder) => ({\r\n    // signup: builder.mutation({\r\n    //   query: (config) => ({\r\n    //     url: `${BASE_URL}/signup`,\r\n    //     method: \"POST\",\r\n    //     ...config,\r\n    //   }),\r\n    // }),\r\n    // stockDelivery: builder.mutation({\r\n    //   query: (config) => ({\r\n    //     url: `${BASE_URL}/add-delivery-Item`,\r\n    //     method: \"POST\",\r\n    //     ...config,\r\n    //   }),\r\n    // }),\r\n\r\n    getSkuStocks: builder.query({\r\n      query: (arg) => {\r\n        const { productId } = arg;\r\n        return {\r\n          url: `${BASE_URL}/Get-Stocks-SKU/${productId}`,\r\n          method: \"GET\",\r\n          //   params: { productId },\r\n        };\r\n      },\r\n    }),\r\n    getStocksByLocation: builder.query({\r\n      query: (arg) => {\r\n        const { locationId } = arg;\r\n        return {\r\n          url: `${BASE_URL}/Get-Stocks-Location/${locationId}`,\r\n          method: \"GET\",\r\n          //   params: { productId },\r\n        };\r\n      },\r\n    }),\r\n\r\n    getProductBalances: builder.query({\r\n      // Get-Products-Balances\r\n      query: (arg) => {\r\n        const { userType } = arg;\r\n        return {\r\n          url: `${BASE_URL}/Get-Products-Store-Balances`,\r\n          method: \"GET\",\r\n          // params: { userType },\r\n        };\r\n      },\r\n    }),\r\n\r\n\r\n    getAllProductsBalance: builder.query({\r\n      query: (arg) => {\r\n        const { userType } = arg;\r\n        return {\r\n          url: `${BASE_URL}/Get-Products-Balances`,\r\n          method: \"GET\",\r\n          // params: { userType },\r\n        };\r\n      },\r\n    }),\r\n    getAuditLogs: builder.query({\r\n      query: (arg) => {\r\n        const { pageNo } = arg;\r\n        console.log(pageNo);\r\n        return {\r\n          url: `${BASE_URL}/Get-AuditLogs`,\r\n          method: \"GET\",\r\n          params: { pageNo },\r\n        };\r\n      },\r\n    }),\r\n\r\n    getTransactionLogs: builder.query({\r\n      query: (arg) => {\r\n        const { From, To, filter } = arg;\r\n        // console.log(pageNo);\r\n        return {\r\n          url: `${BASE_URL}/Get-TransactionLogs`,\r\n          method: \"GET\",\r\n          params: { From, To, filter  },\r\n        };\r\n      },\r\n    }),\r\n    getRackBalance: builder.query({\r\n      query: (arg) => {\r\n        const { RackId } = arg;\r\n        return {\r\n          url: `${BASE_URL}/Get-Rack-Balance/${RackId}`,\r\n          method: \"GET\",\r\n          // params: { RackId },\r\n        };\r\n      },\r\n    }),\r\n\r\n    getReceivingLog: builder.query({\r\n      query: (arg) => {\r\n        const { userType } = arg;\r\n        return {\r\n          url: `${BASE_URL}/Receiving-Log`,\r\n          method: \"GET\",\r\n          params: { userType },\r\n        };\r\n      },\r\n    }),\r\n\r\n    getReleaseLog: builder.query({\r\n      query: (arg) => {\r\n        const { userType } = arg;\r\n        return {\r\n          url: `${BASE_URL}/Receiving-Log`,\r\n          method: \"GET\",\r\n          params: { userType },\r\n        };\r\n      },\r\n    }),\r\n    getMeasuringUnits: builder.query({\r\n      query: (arg) => {\r\n        // const { userType } = arg;\r\n        return {\r\n          url: `${BASE_URL}/Get-MeasureUnits`,\r\n          method: \"GET\",\r\n          // params: { userType },\r\n        };\r\n      },\r\n    }),\r\n\r\n   \r\n    // getAllCompanyCustomers: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { userType } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/company/getalluser`,\r\n    //       method: \"GET\",\r\n    //       params: { userType },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    // getAllTrips: builder.query({\r\n    //   query: (arg) => {\r\n    //     // const { userType } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/super-admin/getAllTripRequest`,\r\n    //       method: \"GET\",\r\n    //       // params: { userType },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    // getAllRidersForCompany: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { userId } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/super-admin/getallriderscompany`,\r\n    //       method: \"GET\",\r\n    //       params: { userId },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    getStats: builder.query({\r\n      query: (arg) => {\r\n        // const { userType } = arg;\r\n        return {\r\n          url: `${BASE_URL}/super-admin/userStatsChart`,\r\n          method: \"GET\",\r\n          // params: { userType },\r\n        };\r\n      },\r\n    }),\r\n  }),\r\n});\r\n\r\n// ;\r\n\r\nexport default ReportsApi;\r\n","// import React from \"react\";\r\n// import { CSVLink } from \"react-csv\";\r\n\r\n// const ExportToExcel = () => {\r\n//   const data = [\r\n//     // Bold headers row\r\n//     [\r\n//       { value: \"Name\", style: { bold: true } },\r\n//       { value: \"Age\", style: { bold: true } },\r\n//       { value: \"Country\", style: { bold: true } },\r\n//     ],\r\n//     // Data rows\r\n//     [\"John Doe\", 25, \"USA\"],\r\n//     [\"Jane Smith\", 30, \"Canada\"],\r\n//     // Add more rows as needed\r\n//   ];\r\n\r\n//   const excelTitle = \"My Excel Sheet\";\r\n\r\n//   return (\r\n//     <div>\r\n//       <h1>Export Data to Excel</h1>\r\n//       <table>\r\n//         <tbody>\r\n//           {data.map((row, index) => (\r\n//             <tr key={index}>\r\n//               {row.map((cell, cellIndex) => (\r\n//                 <td key={cellIndex} style={cell.style}>\r\n//                   {cell.value}\r\n//                 </td>\r\n//               ))}\r\n//             </tr>\r\n//           ))}\r\n//         </tbody>\r\n//       </table>\r\n\r\n//       <CSVLink data={data} filename={\"exported-data.csv\"} target=\"_blank\">\r\n//         {excelTitle}\r\n//       </CSVLink>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default ExportToExcel;\r\n\r\nimport { Button } from \"@mui/material\";\r\nimport React from \"react\";\r\nimport { useEffect } from \"react\";\r\n// import { Table, Button } from 'antd';\r\n// import { ExcelOutlined } from '@ant-design/icons';\r\nimport * as XLSX from \"xlsx\";\r\n\r\nconst ExportToExcel = ({ data, header }) => {\r\n  // Sample data for the Ant Design table\r\n  let dataSource = [];\r\n  // { key: \"1\", name: \"John Doe\", age: 25, country: \"USA\" },\r\n  // { key: \"2\", name: \"Jane Smith\", age: 30, country: \"Canada\" },\r\n  // Add more data as needed\r\n\r\n  //   console.log(data);\r\n\r\n  useEffect(() => {\r\n    // console.log(data);\r\n    dataSource = data;\r\n  }, [data]);\r\n\r\n  // Columns configuration for the Ant Design table\r\n  const columns = header.map((e) => ({\r\n    title: e?.toUpperCase(),\r\n    dataIndex: e.toLowerCase(),\r\n    key: e,\r\n  }));\r\n\r\n  // { title: \"Age\", dataIndex: \"age\", key: \"age\" },\r\n  // { title: \"Country\", dataIndex: \"country\", key: \"country\" },\r\n  // Add more columns as needed\r\n\r\n  const exportToExcel = () => {\r\n    // Create a worksheet with bold headers\r\n    const ws = XLSX.utils.aoa_to_sheet([\r\n      columns.map((column) => ({\r\n        t: \"s\",\r\n        v: column.title,\r\n        s: { font: { bold: true } },\r\n      })),\r\n      ...dataSource.map((record) =>\r\n        columns.map((column) => record[column.dataIndex])\r\n      ),\r\n    ]);\r\n\r\n    const wb = XLSX.utils.book_new();\r\n    XLSX.utils.book_append_sheet(wb, ws, \"Sheet1\");\r\n    XLSX.writeFile(wb, \"exported-data.xlsx\");\r\n  };\r\n\r\n  return (\r\n    <div>\r\n    \r\n\r\n      <Button type=\"primary\" onClick={exportToExcel}>\r\n        Export to Excel\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExportToExcel;\r\n","import { SoftwrkApi } from \"configs/StoreQueryConfig\";\r\n\r\nconst BASE_URL = \"/inventory\";\r\n\r\nexport const InventoryApi = SoftwrkApi.injectEndpoints({\r\n  endpoints: (builder) => ({\r\n    generateBarCode: builder.mutation({\r\n      query: ({ path, ...config }) => ({\r\n        url: `${BASE_URL}/Generate-Barcode/${path}`,\r\n        method: \"PUT\",\r\n        // ...config,\r\n      }),\r\n    }),\r\n    // deleteJob: builder.mutation({\r\n    //   query: ({ path, ...config }) => ({\r\n    //     url: `${JOBS_BASE_URL}/${path.id}`,\r\n    //     method: \"DELETE\",\r\n    //     ...config,\r\n    //   }),\r\n    //   invalidatesTags: (_, error, { path }) =>\r\n    //     !error ? invalidateTags(StoreQueryTagEnum.JOB, { ids: [path.id] }) : [],\r\n    // }),\r\n\r\n    // discard: builder.mutation({\r\n    //   query: (config) => ({\r\n    //     url: `${BASE_URL}/Discard-Delivery`,\r\n    //     method: \"DELETE\",\r\n    //     ...config,\r\n    //   }),\r\n    // }),\r\n    // stockDelivery: builder.mutation({\r\n    //   query: (config) => ({\r\n    //     url: `${BASE_URL}/add-delivery-Item`,\r\n    //     method: \"POST\",\r\n    //     ...config,\r\n    //   }),\r\n    // }),\r\n\r\n    // getAllDeliveries: builder.query({\r\n    //   query: (arg) => {\r\n    //     // const { userType } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}`,\r\n    //       method: \"GET\",\r\n    //       // params: { userType },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    // allDeliveries: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { userType } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}`,\r\n    //       method: \"GET\",\r\n    //       // params: { userType },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    // getTempDeliveries: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { userType } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/Get-DeliveryDetails`,\r\n    //       method: \"GET\",\r\n    //       // params: { userType },\r\n    //     };\r\n    //   },\r\n    // }),\r\n\r\n    // getAllRidersForCompany: builder.query({\r\n    //   query: (arg) => {\r\n    //     const { userId } = arg;\r\n    //     return {\r\n    //       url: `${BASE_URL}/super-admin/getallriderscompany`,\r\n    //       method: \"GET\",\r\n    //       params: { userId },\r\n    //     };\r\n    //   },\r\n    // }),\r\n  }),\r\n});\r\n\r\n// ;\r\n\r\nexport default InventoryApi;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Select from \"@mui/material/Select\";\r\nimport MenuItem from \"@mui/material/MenuItem\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport InputLabel from \"@mui/material/InputLabel\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Table from \"@mui/material/Table\";\r\nimport TableBody from \"@mui/material/TableBody\";\r\nimport TableCell from \"@mui/material/TableCell\";\r\nimport TableContainer from \"@mui/material/TableContainer\";\r\nimport TableHead from \"@mui/material/TableHead\";\r\nimport TableRow from \"@mui/material/TableRow\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport { Autocomplete, Card, Typography } from \"@mui/material\";\r\nimport CategoryApi from \"apis/CategoryApi\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport { UserApi } from \"apis/UserApi\";\r\nimport ReportsApi from \"apis/ReportsApi\";\r\nimport ExportToExcel from \"features/dashboard/ExportToExcel\";\r\nimport InventoryApi from \"apis/InventoryApi\";\r\n\r\nconst UserCreation = () => {\r\n  const [refreshD, setRefreshD] = useState(0);\r\n  const { enqueueSnackbar } = useSnackbar();\r\n\r\n  const getCategories = CategoryApi.useGetCategoryQuery({\r\n    // id: formData.rack,\r\n  });\r\n  const categories = getCategories?.data;\r\n\r\n  const getStoreProductsResult = ReportsApi.useGetAllProductsBalanceQuery({\r\n    refreshD,\r\n    // RackId: formData.store,\r\n    // Location,\r\n  });\r\n\r\n  //   const storeProducts = getStoreProductsResult?.data?.reverse()\r\n  const storeProducts = getStoreProductsResult?.data\r\n    ? [...getStoreProductsResult.data]?.reverse()\r\n    : [];\r\n\r\n  const getMeasuringUnitsResult = ReportsApi.useGetMeasuringUnitsQuery({\r\n    // refreshD,\r\n    // RackId: formData.store,\r\n    // Location,\r\n  });\r\n  const MeasureUnits = getMeasuringUnitsResult?.data;\r\n\r\n  const [formData, setFormData] = React.useState({\r\n    categoryId: \"\",\r\n    reOrderLevel: \"\",\r\n    measureUnitId: \"\",\r\n    name: \"\",\r\n    unitPerPack: \"\",\r\n  });\r\n\r\n  const [searchitemHolder, setsearchitemHolder] = React.useState([]);\r\n  const [isLoading, setIsLoading] = React.useState(false);\r\n  const [clear, setClear] = React.useState(null);\r\n  const [searchitemText, setsearchitemText] = React.useState(\"\");\r\n  const [createProductMuation, createProductMutationResult] =\r\n    UserApi.useCreateProductMutation();\r\n\r\n  const [createBarcodeMuation, createBarcodeMutationResult] =\r\n    InventoryApi.useGenerateBarCodeMutation();\r\n\r\n  const handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setFormData({\r\n      ...formData,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    postOutbound();\r\n    e.preventDefault();\r\n\r\n    // Handle form submission with formData\r\n  };\r\n\r\n  const GenerateBarCode = async (item) => {\r\n    // let payload = {\r\n    //   ...formData,\r\n    //   tagType: 1,\r\n    //   allowSplitIssuance: true,\r\n    //   allowPartialUtilisation: true,\r\n    //   allowPartialRelease: true,\r\n    //   isDeleted: false,\r\n    //   maximumRequisition: 1000,\r\n    //   enableRequisition: true,\r\n    // };\r\n\r\n    // console.log(payload);\r\n\r\n    // alert('iii')\r\n\r\n    try {\r\n      const data = await createBarcodeMuation({\r\n        data: item,\r\n        path: item.id,\r\n      }).unwrap();\r\n      // TODO extra login\r\n      // console.log(data.data);\r\n      enqueueSnackbar(\"Barcode Created successfully\", { variant: \"success\" });\r\n      // setFormData({\r\n      //   categoryId: \"\",\r\n      //   reOrderLevel: \"\",\r\n      //   measureUnitId: \"\",\r\n      //   name: \"\",\r\n      //   unitPerPack: \"\",\r\n      // });\r\n      // setRefreshD((orev)=>orev+1)\r\n      // redirect();\r\n    } catch (error) {\r\n      enqueueSnackbar(error?.data?.message, \"Failed to login\", {\r\n        variant: \"error\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const postOutbound = async () => {\r\n    let payload = {\r\n      ...formData,\r\n      tagType: 1,\r\n      allowSplitIssuance: true,\r\n      allowPartialUtilisation: true,\r\n      allowPartialRelease: true,\r\n      isDeleted: false,\r\n      maximumRequisition: 1000,\r\n      enableRequisition: true,\r\n    };\r\n\r\n    setIsLoading(true);\r\n\r\n    try {\r\n      if (storeProducts.find((e) => e?.name == formData.name)) {\r\n        enqueueSnackbar(\"Name already exists\", { variant: \"error\" });\r\n        return;\r\n      }\r\n\r\n\r\n      if (\r\n        !formData?.categoryId ||\r\n        !formData?.reOrderLevel ||\r\n        !formData?.measureUnitId ||\r\n        !formData?.name ||\r\n        !formData?.unitPerPack\r\n      ) {\r\n        enqueueSnackbar(\"Please make sure all fields are populated\", {\r\n          variant: \"error\",\r\n        });\r\n      setIsLoading(false);\r\n\r\n        return;\r\n      }\r\n\r\n      const data = await createProductMuation({ data: payload }).unwrap();\r\n      // TODO extra login\r\n      // console.log(data.data);\r\n      enqueueSnackbar(\"Created successfully\", { variant: \"success\" });\r\n      setFormData({\r\n        categoryId: \"\",\r\n        reOrderLevel: \"\",\r\n        measureUnitId: \"\",\r\n        name: \"\",\r\n        unitPerPack: \"\",\r\n      });\r\n      setRefreshD((orev) => orev + 1);\r\n      setIsLoading(false);\r\n      setClear(null);\r\n\r\n      // redirect();\r\n    } catch (error) {\r\n      enqueueSnackbar(error?.message, \"Failed to login\", {\r\n        variant: \"error\",\r\n      });\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const header = [\r\n    \"#\",\r\n    \"Product\",\r\n    \"Category\",\r\n    \"Code\",\r\n    // \"Status\",\r\n    \"Balance\",\r\n    \"reorderLevel\",\r\n  ];\r\n\r\n  function filterListByArray(text) {\r\n    // return originalList.filter(item =>\r\n    setsearchitemText(text);\r\n    let pp = storeProducts?.filter((array) =>\r\n      array?.name?.toLowerCase()?.includes(text?.toLowerCase())\r\n    );\r\n\r\n    console.log(pp);\r\n\r\n    setsearchitemHolder(pp);\r\n    // );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Typography className=\"text-center font-bold my-5\" variant=\"h4\">\r\n        Item Creation\r\n      </Typography>\r\n      <div className=\" gap-6\">\r\n        <Card className=\"px-8 py-4 w-full bg-black text-white rounded-2xl\">\r\n          <form className=\"flex flex-col gap-4  px-10\" onSubmit={handleSubmit}>\r\n            <div className=\"w-full mb-6 flex flex-col gap-4\">\r\n              <div className=\"w-full mt-6\">\r\n                <div class=\"flex gap-6 items-center\">\r\n                  <div className=\"w-full\">\r\n                    <Typography>Product Category</Typography>\r\n                    <FormControl className=\"w-full\" fullWidth>\r\n                      <Autocomplete\r\n                        value={clear}\r\n                        className=\"m-2\"\r\n                        disablePortal\r\n                        onChange={\r\n                          (event, newValue) =>\r\n                            // handleChange(event, newValue)\r\n                            {\r\n                              setFormData({\r\n                                ...formData,\r\n                                categoryId: newValue?.id,\r\n                              });\r\n                              setClear(newValue);\r\n                            }\r\n                          // console.log(newValue)\r\n                        }\r\n                        // id=\"combo-box-demo\"\r\n                        options={(categories || [])?.map((e) => ({\r\n                          label: e?.name,\r\n                          id: e?.id,\r\n                        }))}\r\n                        sx={{ minWidth: 200 }}\r\n                        renderInput={(params) => <TextField {...params} />}\r\n                      />\r\n                      {/* <Select\r\n                        className=\"bg-white w-full\"\r\n                        name=\"categoryId\"\r\n                        value={formData.categoryId}\r\n                        onChange={handleChange}\r\n                      >\r\n                        {categories?.map((e) => (\r\n                          <MenuItem value={e?.id}>{e?.name}</MenuItem>\r\n                        ))}\r\n                      </Select> */}\r\n                    </FormControl>\r\n                  </div>\r\n\r\n                  <div className=\"w-full\">\r\n                    <Typography>Reorder Level</Typography>\r\n                    <TextField\r\n                      className=\"bg-white rounded-full\"\r\n                      // label=\"Field 6\"\r\n                      name=\"reOrderLevel\"\r\n                      value={formData.reOrderLevel}\r\n                      onChange={handleChange}\r\n                      fullWidth\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className=\"flex gap-6\">\r\n                <div className=\"w-full \">\r\n                  {/* <div className=\"w-full\">\r\n                    <Typography>Tag Type</Typography>\r\n                    <FormControl className=\"w-full\" fullWidth>\r\n                      <InputLabel>Select Field</InputLabel>\r\n                      <Select\r\n                        className=\"bg-white w-full\"\r\n                        name=\"tagType\"\r\n                        value={formData.tagType}\r\n                        //   onChange={handleChange}\r\n                      >\r\n                        <MenuItem value=\"1\"> 1</MenuItem>\r\n                        <MenuItem value=\"2\"> 2</MenuItem>\r\n                        <MenuItem value=\"3\"> 3</MenuItem>\r\n                      </Select>\r\n                    </FormControl>\r\n                  </div> */}\r\n                </div>\r\n                <div className=\"w-full\">\r\n                  {/* <Typography>Measure Unit Base</Typography> */}\r\n                  {/* <TextField\r\n                    className=\"bg-white rounded-full\"\r\n                    value={formData.measureUnitId}\r\n                    onChange={handleChange}\r\n                    fullWidth\r\n                  /> */}\r\n\r\n                  <div className=\"w-full\">\r\n                    <Typography>Measure Unit Base</Typography>\r\n                    <FormControl className=\"w-full\" fullWidth>\r\n                      {/* <InputLabel>Select Field</InputLabel> */}\r\n                      <Select\r\n                        className=\"bg-white w-full\"\r\n                        name=\"measureUnitId\"\r\n                        value={formData.measureUnitId}\r\n                        onChange={handleChange}\r\n                      >\r\n                        {MeasureUnits?.map((e) => (\r\n                          <MenuItem value={e?.baseUnitId}>{e?.unit}</MenuItem>\r\n                        ))}\r\n                      </Select>\r\n                    </FormControl>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className=\"flex gap-6\">\r\n                <div className=\"w-full \">\r\n                  <Typography>Name</Typography>\r\n                  <TextField\r\n                    className=\"bg-white rounded-full\"\r\n                    name=\"name\"\r\n                    value={formData.name}\r\n                    onChange={handleChange}\r\n                    fullWidth\r\n                  />\r\n                </div>\r\n                <div className=\"w-full \">\r\n                  <Typography>Unit Pack</Typography>\r\n                  <TextField\r\n                    className=\"bg-white rounded-full\"\r\n                    // label=\"Field 6\"\r\n                    name=\"unitPerPack\"\r\n                    value={formData.unitPerPack}\r\n                    onChange={handleChange}\r\n                    fullWidth\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"flex gap-3 w-full justify-start mt-5\">\r\n              <Button\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n                // color=\"primary\"\r\n                className=\"p-3 w-full bg-[#2BDF27] flex justify-center gap-9 items-center text-base mb-6\"\r\n                // onClick={() => localStorage.setItem('type', 'CLIENT')}\r\n                // className=' '\r\n              >\r\n                {isLoading && (\r\n                  <div class=\"flex items-center justify-center\">\r\n                    <div class=\"border-t-4 border-white border-solid rounded-full animate-spin h-4 w-4\"></div>\r\n                  </div>\r\n                )}\r\n                Save\r\n              </Button>\r\n            </div>\r\n          </form>\r\n\r\n          <div class=\"flex flex-between\">\r\n            <div className=\"flex items-center mt-6 mb-3\">\r\n              {/* <Button>Csv</Button> */}\r\n              <ExportToExcel data={storeProducts} header={header} />\r\n              <Button className=\"ml-4\">PDF</Button>\r\n            </div>\r\n            <TextField\r\n              placeholder=\"Search table\"\r\n              className=\"\"\r\n              onChange={(e) => filterListByArray(e.target.value)}\r\n            />\r\n          </div>\r\n\r\n          <TableContainer component={Paper}>\r\n            <Table>\r\n              <TableHead>\r\n                <TableRow className=\"font-bold\">\r\n                  <TableCell className=\"font-bold text-base\">#</TableCell>\r\n                  <TableCell className=\"font-bold text-base\">Product</TableCell>\r\n                  <TableCell className=\"font-bold text-base\">\r\n                    Category\r\n                  </TableCell>\r\n                  <TableCell className=\"font-bold text-base\">Code</TableCell>\r\n\r\n                  <TableCell className=\"font-bold text-base\">Balance</TableCell>\r\n                  <TableCell className=\"font-bold text-base\">\r\n                    Reorder-level\r\n                  </TableCell>\r\n\r\n                  <TableCell className=\"font-bold text-base\">\r\n                    Generate Bar Code\r\n                  </TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {(searchitemText.length > 0\r\n                  ? searchitemHolder\r\n                  : storeProducts\r\n                )?.map((row, idx) => (\r\n                  <TableRow key={row.id}>\r\n                    <TableCell>{idx + 1}</TableCell>\r\n                    <TableCell>{row.name}</TableCell>\r\n                    <TableCell>{row.category}</TableCell>\r\n                    <TableCell>{row.code}</TableCell>\r\n                    <TableCell>{row.balance}</TableCell>\r\n                    <TableCell>{row.reOrderLevel} </TableCell>\r\n\r\n                    <TableCell>\r\n                      <Button onClick={() => GenerateBarCode(row)}>\r\n                        Generate Barcode\r\n                      </Button>\r\n                    </TableCell>\r\n                    {/* <TableCell>{row.column6}</TableCell> */}\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserCreation;\r\n"],"names":["BASE_URL","SoftwrkApi","endpoints","builder","getCategory","query","arg","userType","url","concat","method","getStats","getSkuStocks","productId","getStocksByLocation","locationId","getProductBalances","getAllProductsBalance","getAuditLogs","pageNo","console","log","params","getTransactionLogs","From","To","filter","getRackBalance","RackId","getReceivingLog","getReleaseLog","getMeasuringUnits","_ref","data","header","dataSource","useEffect","columns","map","e","title","toUpperCase","dataIndex","toLowerCase","key","_jsx","children","Button","type","onClick","exportToExcel","ws","XLSX","column","t","v","s","font","bold","record","wb","generateBarCode","mutation","path","config","UserCreation","_ref2","_ref3","refreshD","setRefreshD","useState","enqueueSnackbar","useSnackbar","getCategories","CategoryApi","categories","getStoreProductsResult","ReportsApi","storeProducts","reverse","getMeasuringUnitsResult","MeasureUnits","formData","setFormData","React","categoryId","reOrderLevel","measureUnitId","name","unitPerPack","searchitemHolder","setsearchitemHolder","isLoading","setIsLoading","clear","setClear","searchitemText","setsearchitemText","createProductMuation","createProductMutationResult","UserApi","createBarcodeMuation","createBarcodeMutationResult","InventoryApi","handleChange","event","value","target","postOutbound","async","payload","tagType","allowSplitIssuance","allowPartialUtilisation","allowPartialRelease","isDeleted","maximumRequisition","enableRequisition","find","variant","unwrap","orev","error","message","_jsxs","Typography","className","Card","onSubmit","preventDefault","class","FormControl","fullWidth","Autocomplete","disablePortal","onChange","newValue","id","options","label","sx","minWidth","renderInput","TextField","Select","MenuItem","baseUnitId","unit","ExportToExcel","placeholder","text","pp","array","_array$name","_array$name$toLowerCa","includes","filterListByArray","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","TableBody","length","row","idx","category","code","balance","item","_error$data","GenerateBarCode"],"sourceRoot":""}