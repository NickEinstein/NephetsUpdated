{"version":3,"file":"static/js/4915.98ac14bd.chunk.js","mappings":"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","sources":["features/Dashboards&Reports/BinCard.js","features/dashboard/ExportToExcel.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Select from \"@mui/material/Select\";\r\nimport MenuItem from \"@mui/material/MenuItem\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport InputLabel from \"@mui/material/InputLabel\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Table from \"@mui/material/Table\";\r\nimport TableBody from \"@mui/material/TableBody\";\r\nimport TableCell from \"@mui/material/TableCell\";\r\nimport TableContainer from \"@mui/material/TableContainer\";\r\nimport TableHead from \"@mui/material/TableHead\";\r\nimport TableRow from \"@mui/material/TableRow\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport { Card, Checkbox, TablePagination, Typography } from \"@mui/material\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport UserApi from \"apis/UserApi\";\r\nimport ExportToExcel from \"features/dashboard/ExportToExcel\";\r\nimport useAuthUser from \"hooks/useAuthUser\";\r\nimport moment from \"moment\";\r\nimport {\r\n  Document,\r\n  Page,\r\n  Text,\r\n  View,\r\n  StyleSheet,\r\n  PDFDownloadLink,\r\n} from \"@react-pdf/renderer\";\r\nimport { PDFViewer } from \"@react-pdf/renderer\";\r\n\r\nconst styles = StyleSheet.create({\r\n  page: {\r\n    flexDirection: \"row\",\r\n    backgroundColor: \"#ffffff\",\r\n  },\r\n  section: {\r\n    margin: 10,\r\n    padding: 10,\r\n    flexGrow: 1,\r\n  },\r\n});\r\n\r\nconst MyDocument = () => (\r\n  <Document>\r\n    <Page size=\"A4\" style={styles.page}>\r\n      <View style={styles.section}>\r\n        <Text>Hello, this is a PDF!</Text>\r\n      </View>\r\n    </Page>\r\n  </Document>\r\n);\r\n\r\nconst GlobalBin = () => {\r\n  const user = useAuthUser();\r\n  const [ProjectType, setProjectType] = useState(1);\r\n  const [Location, setLocation] = useState(1);\r\n  const [searchitemHolder, setsearchitemHolder] = React.useState([]);\r\n  const [searchitemText, setsearchitemText] = React.useState(\"\");\r\n  const { enqueueSnackbar } = useSnackbar();\r\n\r\n  const getGlobalBinResult = UserApi.useGetBinCardQuery({\r\n    ProjectType: 1,\r\n    Location: user.locationId,\r\n  });\r\n  const globalBin = getGlobalBinResult?.data;\r\n\r\n  const [formData, setFormData] = React.useState({\r\n    field1: \"\",\r\n    field2: \"\",\r\n    field3: \"\",\r\n    field4: \"\",\r\n    field5: \"\",\r\n    field6: \"\",\r\n    selectField: \"\",\r\n  });\r\n\r\n  const handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setFormData({\r\n      ...formData,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    // Handle form submission with formData\r\n  };\r\n\r\n  function filterListByArray(text) {\r\n    // return originalList.filter(item =>\r\n    setsearchitemText(text);\r\n    let pp = globalBin?.filter((array) =>\r\n      array?.product?.toLowerCase()?.includes(text?.toLowerCase())\r\n    );\r\n\r\n    console.log(pp);\r\n\r\n    setsearchitemHolder(pp);\r\n    // );\r\n  }\r\n\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(10);\r\n\r\n  // ... (other code remains unchanged)\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <PDFDownloadLink document={<MyDocument />} fileName=\"fee_acceptance.pdf\">\r\n        {({ blob, url, loading, error }) =>\r\n          loading ? \"Loading document...\" : \"Download now!\"\r\n        }\r\n      </PDFDownloadLink>\r\n\r\n      <Typography className=\"text-center font-bold my-5\" variant=\"h4\">\r\n        Bin Card\r\n      </Typography>\r\n      <div className=\"flex flex-col gap-6 items-start\">\r\n        <Card\r\n          title=\"\"\r\n          className=\"px-8 py-4 w-full bg-black rounded-2xl flex flex-col gap-6 items-start\"\r\n        >\r\n          {/* <Button className=\"bg-red-500 text-white flex\">\r\n            Delete Selected Items\r\n          </Button> */}\r\n\r\n          <div class=\"flex-between items-center w-full\">\r\n            <div className=\"flex items-center\">\r\n              {/* {/* <Button>Csv</Button> */}\r\n              <ExportToExcel\r\n                data={globalBin}\r\n                header={[\r\n                  \"#\",\r\n                  \"Product\",\r\n                  \"Code\",\r\n                  \"Location\",\r\n                  \"GM\",\r\n                  \"Special\",\r\n                  \"FFM\",\r\n                  \"Non-Technical\",\r\n                ]}\r\n              />\r\n              {/* <Button>Excel</Button> */}\r\n              <Button className=\"ml-4\">PDF</Button>\r\n            </div>\r\n            <TextField\r\n              placeholder=\"Search table\"\r\n              className=\"\"\r\n              onChange={(e) => filterListByArray(e.target.value)}\r\n            />\r\n          </div>\r\n          <TableContainer component={Paper}>\r\n            <Table>\r\n              <TableHead>\r\n                <TableRow className=\"font-bold\">\r\n                  <TableCell className=\"font-bold text-base\">#</TableCell>\r\n                  <TableCell className=\"font-bold text-base\">Product</TableCell>\r\n                  <TableCell className=\"font-bold text-base\">Code</TableCell>\r\n                  <TableCell className=\"font-bold text-base\">\r\n                    Location\r\n                  </TableCell>\r\n                  <TableCell className=\"font-bold text-base\">\r\n                    Balance Forward\r\n                  </TableCell>\r\n                  <TableCell className=\"font-bold text-base\">In</TableCell>\r\n                  <TableCell className=\"font-bold text-base\">Out</TableCell>\r\n                  <TableCell className=\"font-bold text-base\">Balance</TableCell>\r\n                  <TableCell className=\"font-bold text-base\">Date</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {(searchitemText.length > 0 ? searchitemHolder : globalBin)\r\n                  ?.slice(page * rowsPerPage, (page + 1) * rowsPerPage)\r\n                  ?.map((row, idx) => (\r\n                    <TableRow key={row.id}>\r\n                      <TableCell>{idx + 1}</TableCell>\r\n                      <TableCell>{row.product}</TableCell>\r\n                      <TableCell>{row.requestCode}</TableCell>\r\n                      <TableCell>{row.location}</TableCell>\r\n                      <TableCell>{row.bf}</TableCell>\r\n                      <TableCell>{row.in}</TableCell>\r\n                      <TableCell>{row.out}</TableCell>\r\n                      <TableCell>{row.balance}</TableCell>\r\n                      <TableCell>\r\n                        {moment(row.dateCreated).format(\"llll\")}\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n          <div class=\"bg-white w-full\">\r\n            <TablePagination\r\n              rowsPerPageOptions={[10, 25, 50, 100]}\r\n              component=\"div\"\r\n              count={\r\n                (searchitemText.length > 0 ? searchitemHolder : globalBin)\r\n                  ?.length\r\n              }\r\n              rowsPerPage={rowsPerPage}\r\n              page={page}\r\n              onPageChange={handleChangePage}\r\n              onRowsPerPageChange={handleChangeRowsPerPage}\r\n            />\r\n          </div>\r\n\r\n          {/* <TableContainer component={Paper}>\r\n        <Table>\r\n          <TableHead>\r\n          </TableHead>\r\n          <TableBody>\r\n            {(searchitemText.length > 0\r\n              ? searchitemHolder\r\n              : globalBin\r\n            )\r\n             \r\n              .map((row, idx) => (\r\n                <TableRow key={row.id}>\r\n                </TableRow>\r\n              ))}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer> */}\r\n\r\n          {/* ... (other code remains unchanged) */}\r\n          {/* </div> */}\r\n\r\n          {/* <div className=\"flex items-center mt-12 self-end\">\r\n            <Button>First</Button>\r\n            <Button>Prev</Button>\r\n            <Button>Next</Button>\r\n            <Button>Last</Button>\r\n          </div> */}\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GlobalBin;\r\n","// import React from \"react\";\r\n// import { CSVLink } from \"react-csv\";\r\n\r\n// const ExportToExcel = () => {\r\n//   const data = [\r\n//     // Bold headers row\r\n//     [\r\n//       { value: \"Name\", style: { bold: true } },\r\n//       { value: \"Age\", style: { bold: true } },\r\n//       { value: \"Country\", style: { bold: true } },\r\n//     ],\r\n//     // Data rows\r\n//     [\"John Doe\", 25, \"USA\"],\r\n//     [\"Jane Smith\", 30, \"Canada\"],\r\n//     // Add more rows as needed\r\n//   ];\r\n\r\n//   const excelTitle = \"My Excel Sheet\";\r\n\r\n//   return (\r\n//     <div>\r\n//       <h1>Export Data to Excel</h1>\r\n//       <table>\r\n//         <tbody>\r\n//           {data.map((row, index) => (\r\n//             <tr key={index}>\r\n//               {row.map((cell, cellIndex) => (\r\n//                 <td key={cellIndex} style={cell.style}>\r\n//                   {cell.value}\r\n//                 </td>\r\n//               ))}\r\n//             </tr>\r\n//           ))}\r\n//         </tbody>\r\n//       </table>\r\n\r\n//       <CSVLink data={data} filename={\"exported-data.csv\"} target=\"_blank\">\r\n//         {excelTitle}\r\n//       </CSVLink>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default ExportToExcel;\r\n\r\nimport { Button } from \"@mui/material\";\r\nimport React from \"react\";\r\nimport { useEffect } from \"react\";\r\n// import { Table, Button } from 'antd';\r\n// import { ExcelOutlined } from '@ant-design/icons';\r\nimport * as XLSX from \"xlsx\";\r\n\r\nconst ExportToExcel = ({ data, header }) => {\r\n  // Sample data for the Ant Design table\r\n  let dataSource = [];\r\n  // { key: \"1\", name: \"John Doe\", age: 25, country: \"USA\" },\r\n  // { key: \"2\", name: \"Jane Smith\", age: 30, country: \"Canada\" },\r\n  // Add more data as needed\r\n\r\n  //   console.log(data);\r\n\r\n  useEffect(() => {\r\n    // console.log(data);\r\n    dataSource = data;\r\n  }, [data]);\r\n\r\n  // Columns configuration for the Ant Design table\r\n  const columns = header.map((e) => ({\r\n    title: e?.toUpperCase(),\r\n    dataIndex: e.toLowerCase(),\r\n    key: e,\r\n  }));\r\n\r\n  // { title: \"Age\", dataIndex: \"age\", key: \"age\" },\r\n  // { title: \"Country\", dataIndex: \"country\", key: \"country\" },\r\n  // Add more columns as needed\r\n\r\n  const exportToExcel = () => {\r\n    // Create a worksheet with bold headers\r\n    const ws = XLSX.utils.aoa_to_sheet([\r\n      columns.map((column) => ({\r\n        t: \"s\",\r\n        v: column.title,\r\n        s: { font: { bold: true } },\r\n      })),\r\n      ...dataSource.map((record) =>\r\n        columns.map((column) => record[column.dataIndex])\r\n      ),\r\n    ]);\r\n\r\n    const wb = XLSX.utils.book_new();\r\n    XLSX.utils.book_append_sheet(wb, ws, \"Sheet1\");\r\n    XLSX.writeFile(wb, \"exported-data.xlsx\");\r\n  };\r\n\r\n  return (\r\n    <div>\r\n    \r\n\r\n      <Button type=\"primary\" onClick={exportToExcel}>\r\n        Export to Excel\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExportToExcel;\r\n"],"names":["styles","StyleSheet","page","flexDirection","backgroundColor","section","margin","padding","flexGrow","MyDocument","_jsx","Document","children","Page","size","style","View","Text","GlobalBin","_ref2","_ref2$slice","_ref3","user","useAuthUser","ProjectType","setProjectType","useState","Location","setLocation","searchitemHolder","setsearchitemHolder","React","searchitemText","setsearchitemText","enqueueSnackbar","useSnackbar","getGlobalBinResult","UserApi","locationId","globalBin","data","formData","setFormData","field1","field2","field3","field4","field5","field6","selectField","setPage","rowsPerPage","setRowsPerPage","_jsxs","PDFDownloadLink","document","fileName","_ref","blob","url","loading","error","Typography","className","variant","Card","title","class","ExportToExcel","header","Button","TextField","placeholder","onChange","e","text","pp","filter","array","_array$product","_array$product$toLowe","product","toLowerCase","includes","console","log","filterListByArray","target","value","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","TableBody","length","slice","map","row","idx","requestCode","location","bf","in","out","balance","moment","dateCreated","format","id","TablePagination","rowsPerPageOptions","count","onPageChange","handleChangePage","event","newPage","onRowsPerPageChange","parseInt","dataSource","useEffect","columns","toUpperCase","dataIndex","key","type","onClick","exportToExcel","ws","XLSX","column","t","v","s","font","bold","record","wb"],"sourceRoot":""}